// source: db3_namespace.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
import * as jspb from "google-protobuf";
import db3_base_pb from "./db3_base_pb";
var goog = jspb;
var global = function() {
	return this || window || global || self || Function("return this")();
}.call(null);

goog.object.extend(proto, db3_base_pb);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_namespace_proto.Namespace",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_namespace_proto.QueryPrice",
	null,
	global,
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_namespace_proto.QueryPrice = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_namespace_proto.QueryPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_namespace_proto.QueryPrice.displayName =
		"proto.db3_namespace_proto.QueryPrice";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_namespace_proto.Namespace = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_namespace_proto.Namespace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_namespace_proto.Namespace.displayName =
		"proto.db3_namespace_proto.Namespace";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_namespace_proto.QueryPrice.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_namespace_proto.QueryPrice.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_namespace_proto.QueryPrice} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_namespace_proto.QueryPrice.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				price:
					(f = msg.getPrice()) &&
					db3_base_pb.Price.toObject(includeInstance, f),
				queryCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_namespace_proto.QueryPrice}
 */
proto.db3_namespace_proto.QueryPrice.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_namespace_proto.QueryPrice();
	return proto.db3_namespace_proto.QueryPrice.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_namespace_proto.QueryPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_namespace_proto.QueryPrice}
 */
proto.db3_namespace_proto.QueryPrice.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_base_pb.Price();
				reader.readMessage(
					value,
					db3_base_pb.Price.deserializeBinaryFromReader,
				);
				msg.setPrice(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setQueryCount(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_namespace_proto.QueryPrice.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_namespace_proto.QueryPrice.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_namespace_proto.QueryPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_namespace_proto.QueryPrice.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getPrice();
	if (f != null) {
		writer.writeMessage(1, f, db3_base_pb.Price.serializeBinaryToWriter);
	}
	f = message.getQueryCount();
	if (f !== 0) {
		writer.writeUint64(2, f);
	}
};

/**
 * optional db3_base_proto.Price price = 1;
 * @return {?proto.db3_base_proto.Price}
 */
proto.db3_namespace_proto.QueryPrice.prototype.getPrice = function() {
	return /** @type{?proto.db3_base_proto.Price} */ (jspb.Message.getWrapperField(
		this,
		db3_base_pb.Price,
		1,
	));
};

/**
 * @param {?proto.db3_base_proto.Price|undefined} value
 * @return {!proto.db3_namespace_proto.QueryPrice} returns this
 */
proto.db3_namespace_proto.QueryPrice.prototype.setPrice = function(value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_namespace_proto.QueryPrice} returns this
 */
proto.db3_namespace_proto.QueryPrice.prototype.clearPrice = function() {
	return this.setPrice(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_namespace_proto.QueryPrice.prototype.hasPrice = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint64 query_count = 2;
 * @return {number}
 */
proto.db3_namespace_proto.QueryPrice.prototype.getQueryCount = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_namespace_proto.QueryPrice} returns this
 */
proto.db3_namespace_proto.QueryPrice.prototype.setQueryCount = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_namespace_proto.Namespace.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_namespace_proto.Namespace.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_namespace_proto.Namespace} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_namespace_proto.Namespace.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				name: jspb.Message.getFieldWithDefault(msg, 1, ""),
				price:
					(f = msg.getPrice()) &&
					proto.db3_namespace_proto.QueryPrice.toObject(
						includeInstance,
						f,
					),
				ts: jspb.Message.getFieldWithDefault(msg, 3, 0),
				description: jspb.Message.getFieldWithDefault(msg, 4, ""),
				meta:
					(f = msg.getMeta()) &&
					db3_base_pb.BroadcastMeta.toObject(includeInstance, f),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_namespace_proto.Namespace}
 */
proto.db3_namespace_proto.Namespace.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_namespace_proto.Namespace();
	return proto.db3_namespace_proto.Namespace.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_namespace_proto.Namespace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_namespace_proto.Namespace}
 */
proto.db3_namespace_proto.Namespace.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setName(value);
				break;
			case 2:
				var value = new proto.db3_namespace_proto.QueryPrice();
				reader.readMessage(
					value,
					proto.db3_namespace_proto.QueryPrice
						.deserializeBinaryFromReader,
				);
				msg.setPrice(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setTs(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setDescription(value);
				break;
			case 5:
				var value = new db3_base_pb.BroadcastMeta();
				reader.readMessage(
					value,
					db3_base_pb.BroadcastMeta.deserializeBinaryFromReader,
				);
				msg.setMeta(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_namespace_proto.Namespace.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_namespace_proto.Namespace.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_namespace_proto.Namespace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_namespace_proto.Namespace.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getName();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getPrice();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.db3_namespace_proto.QueryPrice.serializeBinaryToWriter,
		);
	}
	f = message.getTs();
	if (f !== 0) {
		writer.writeUint64(3, f);
	}
	f = message.getDescription();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
	f = message.getMeta();
	if (f != null) {
		writer.writeMessage(
			5,
			f,
			db3_base_pb.BroadcastMeta.serializeBinaryToWriter,
		);
	}
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.db3_namespace_proto.Namespace.prototype.getName = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_namespace_proto.Namespace} returns this
 */
proto.db3_namespace_proto.Namespace.prototype.setName = function(value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional QueryPrice price = 2;
 * @return {?proto.db3_namespace_proto.QueryPrice}
 */
proto.db3_namespace_proto.Namespace.prototype.getPrice = function() {
	return /** @type{?proto.db3_namespace_proto.QueryPrice} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_namespace_proto.QueryPrice,
		2,
	));
};

/**
 * @param {?proto.db3_namespace_proto.QueryPrice|undefined} value
 * @return {!proto.db3_namespace_proto.Namespace} returns this
 */
proto.db3_namespace_proto.Namespace.prototype.setPrice = function(value) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_namespace_proto.Namespace} returns this
 */
proto.db3_namespace_proto.Namespace.prototype.clearPrice = function() {
	return this.setPrice(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_namespace_proto.Namespace.prototype.hasPrice = function() {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional uint64 ts = 3;
 * @return {number}
 */
proto.db3_namespace_proto.Namespace.prototype.getTs = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_namespace_proto.Namespace} returns this
 */
proto.db3_namespace_proto.Namespace.prototype.setTs = function(value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string description = 4;
 * @return {string}
 */
proto.db3_namespace_proto.Namespace.prototype.getDescription = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		4,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_namespace_proto.Namespace} returns this
 */
proto.db3_namespace_proto.Namespace.prototype.setDescription = function(value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional db3_base_proto.BroadcastMeta meta = 5;
 * @return {?proto.db3_base_proto.BroadcastMeta}
 */
proto.db3_namespace_proto.Namespace.prototype.getMeta = function() {
	return /** @type{?proto.db3_base_proto.BroadcastMeta} */ (jspb.Message.getWrapperField(
		this,
		db3_base_pb.BroadcastMeta,
		5,
	));
};

/**
 * @param {?proto.db3_base_proto.BroadcastMeta|undefined} value
 * @return {!proto.db3_namespace_proto.Namespace} returns this
 */
proto.db3_namespace_proto.Namespace.prototype.setMeta = function(value) {
	return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_namespace_proto.Namespace} returns this
 */
proto.db3_namespace_proto.Namespace.prototype.clearMeta = function() {
	return this.setMeta(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_namespace_proto.Namespace.prototype.hasMeta = function() {
	return jspb.Message.getField(this, 5) != null;
};

export default proto.db3_namespace_proto;
