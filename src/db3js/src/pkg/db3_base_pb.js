// source: db3_base.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import * as jspb from "google-protobuf";

var goog = jspb;
var global = function() {
	return this || window || global || self || Function("return this")();
}.call(null);

globalThis.__hack = goog.exportSymbol(
	"proto.db3_base_proto.BroadcastMeta",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_base_proto.ChainId",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_base_proto.ChainRole",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_base_proto.Erc20Token",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_base_proto.Price",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_base_proto.UnitType",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_base_proto.Units",
	null,
	global,
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_base_proto.Units = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_base_proto.Units, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_base_proto.Units.displayName = "proto.db3_base_proto.Units";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_base_proto.Erc20Token = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_base_proto.Erc20Token.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_base_proto.Erc20Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_base_proto.Erc20Token.displayName =
		"proto.db3_base_proto.Erc20Token";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_base_proto.Price = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_base_proto.Price, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_base_proto.Price.displayName = "proto.db3_base_proto.Price";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_base_proto.BroadcastMeta = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_base_proto.BroadcastMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_base_proto.BroadcastMeta.displayName =
		"proto.db3_base_proto.BroadcastMeta";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_base_proto.Units.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_base_proto.Units.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_base_proto.Units} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_base_proto.Units.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				utype: jspb.Message.getFieldWithDefault(msg, 1, 0),
				amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_base_proto.Units}
 */
proto.db3_base_proto.Units.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_base_proto.Units();
	return proto.db3_base_proto.Units.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_base_proto.Units} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_base_proto.Units}
 */
proto.db3_base_proto.Units.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.db3_base_proto.UnitType} */ (reader.readEnum());
				msg.setUtype(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setAmount(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_base_proto.Units.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_base_proto.Units.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_base_proto.Units} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_base_proto.Units.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getUtype();
	if (f !== 0.0) {
		writer.writeEnum(1, f);
	}
	f = message.getAmount();
	if (f !== 0) {
		writer.writeInt64(2, f);
	}
};

/**
 * optional UnitType utype = 1;
 * @return {!proto.db3_base_proto.UnitType}
 */
proto.db3_base_proto.Units.prototype.getUtype = function() {
	return /** @type {!proto.db3_base_proto.UnitType} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		0,
	));
};

/**
 * @param {!proto.db3_base_proto.UnitType} value
 * @return {!proto.db3_base_proto.Units} returns this
 */
proto.db3_base_proto.Units.prototype.setUtype = function(value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.db3_base_proto.Units.prototype.getAmount = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_base_proto.Units} returns this
 */
proto.db3_base_proto.Units.prototype.setAmount = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_base_proto.Erc20Token.repeatedFields_ = [2, 3];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_base_proto.Erc20Token.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_base_proto.Erc20Token.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_base_proto.Erc20Token} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_base_proto.Erc20Token.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				symbal: jspb.Message.getFieldWithDefault(msg, 1, ""),
				unitsList:
					(f = jspb.Message.getRepeatedField(msg, 2)) == null
						? undefined
						: f,
				scalarList:
					(f = jspb.Message.getRepeatedField(msg, 3)) == null
						? undefined
						: f,
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_base_proto.Erc20Token}
 */
proto.db3_base_proto.Erc20Token.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_base_proto.Erc20Token();
	return proto.db3_base_proto.Erc20Token.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_base_proto.Erc20Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_base_proto.Erc20Token}
 */
proto.db3_base_proto.Erc20Token.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setSymbal(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.addUnits(value);
				break;
			case 3:
				var values = /** @type {!Array<number>} */ (reader.isDelimited()
					? reader.readPackedUint64()
					: [reader.readUint64()]);
				for (var i = 0; i < values.length; i++) {
					msg.addScalar(values[i]);
				}
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_base_proto.Erc20Token.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_base_proto.Erc20Token.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_base_proto.Erc20Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_base_proto.Erc20Token.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getSymbal();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getUnitsList();
	if (f.length > 0) {
		writer.writeRepeatedString(2, f);
	}
	f = message.getScalarList();
	if (f.length > 0) {
		writer.writePackedUint64(3, f);
	}
};

/**
 * optional string symbal = 1;
 * @return {string}
 */
proto.db3_base_proto.Erc20Token.prototype.getSymbal = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_base_proto.Erc20Token} returns this
 */
proto.db3_base_proto.Erc20Token.prototype.setSymbal = function(value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated string units = 2;
 * @return {!Array<string>}
 */
proto.db3_base_proto.Erc20Token.prototype.getUnitsList = function() {
	return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(
		this,
		2,
	));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.db3_base_proto.Erc20Token} returns this
 */
proto.db3_base_proto.Erc20Token.prototype.setUnitsList = function(value) {
	return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.db3_base_proto.Erc20Token} returns this
 */
proto.db3_base_proto.Erc20Token.prototype.addUnits = function(
	value,
	opt_index,
) {
	return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_base_proto.Erc20Token} returns this
 */
proto.db3_base_proto.Erc20Token.prototype.clearUnitsList = function() {
	return this.setUnitsList([]);
};

/**
 * repeated uint64 scalar = 3;
 * @return {!Array<number>}
 */
proto.db3_base_proto.Erc20Token.prototype.getScalarList = function() {
	return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(
		this,
		3,
	));
};

/**
 * @param {!Array<number>} value
 * @return {!proto.db3_base_proto.Erc20Token} returns this
 */
proto.db3_base_proto.Erc20Token.prototype.setScalarList = function(value) {
	return jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.db3_base_proto.Erc20Token} returns this
 */
proto.db3_base_proto.Erc20Token.prototype.addScalar = function(
	value,
	opt_index,
) {
	return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_base_proto.Erc20Token} returns this
 */
proto.db3_base_proto.Erc20Token.prototype.clearScalarList = function() {
	return this.setScalarList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_base_proto.Price.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_base_proto.Price.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_base_proto.Price} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_base_proto.Price.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
				unit: jspb.Message.getFieldWithDefault(msg, 2, ""),
				token:
					(f = msg.getToken()) &&
					proto.db3_base_proto.Erc20Token.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_base_proto.Price}
 */
proto.db3_base_proto.Price.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_base_proto.Price();
	return proto.db3_base_proto.Price.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_base_proto.Price} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_base_proto.Price}
 */
proto.db3_base_proto.Price.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setAmount(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setUnit(value);
				break;
			case 3:
				var value = new proto.db3_base_proto.Erc20Token();
				reader.readMessage(
					value,
					proto.db3_base_proto.Erc20Token.deserializeBinaryFromReader,
				);
				msg.setToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_base_proto.Price.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_base_proto.Price.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_base_proto.Price} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_base_proto.Price.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getAmount();
	if (f !== 0) {
		writer.writeUint64(1, f);
	}
	f = message.getUnit();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getToken();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			proto.db3_base_proto.Erc20Token.serializeBinaryToWriter,
		);
	}
};

/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.db3_base_proto.Price.prototype.getAmount = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_base_proto.Price} returns this
 */
proto.db3_base_proto.Price.prototype.setAmount = function(value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string unit = 2;
 * @return {string}
 */
proto.db3_base_proto.Price.prototype.getUnit = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_base_proto.Price} returns this
 */
proto.db3_base_proto.Price.prototype.setUnit = function(value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Erc20Token token = 3;
 * @return {?proto.db3_base_proto.Erc20Token}
 */
proto.db3_base_proto.Price.prototype.getToken = function() {
	return /** @type{?proto.db3_base_proto.Erc20Token} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_base_proto.Erc20Token,
		3,
	));
};

/**
 * @param {?proto.db3_base_proto.Erc20Token|undefined} value
 * @return {!proto.db3_base_proto.Price} returns this
 */
proto.db3_base_proto.Price.prototype.setToken = function(value) {
	return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_base_proto.Price} returns this
 */
proto.db3_base_proto.Price.prototype.clearToken = function() {
	return this.setToken(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_base_proto.Price.prototype.hasToken = function() {
	return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_base_proto.BroadcastMeta.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_base_proto.BroadcastMeta.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_base_proto.BroadcastMeta} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_base_proto.BroadcastMeta.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
				chainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
				chainRole: jspb.Message.getFieldWithDefault(msg, 3, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_base_proto.BroadcastMeta}
 */
proto.db3_base_proto.BroadcastMeta.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_base_proto.BroadcastMeta();
	return proto.db3_base_proto.BroadcastMeta.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_base_proto.BroadcastMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_base_proto.BroadcastMeta}
 */
proto.db3_base_proto.BroadcastMeta.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setNonce(value);
				break;
			case 2:
				var value = /** @type {!proto.db3_base_proto.ChainId} */ (reader.readEnum());
				msg.setChainId(value);
				break;
			case 3:
				var value = /** @type {!proto.db3_base_proto.ChainRole} */ (reader.readEnum());
				msg.setChainRole(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_base_proto.BroadcastMeta.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_base_proto.BroadcastMeta.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_base_proto.BroadcastMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_base_proto.BroadcastMeta.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getNonce();
	if (f !== 0) {
		writer.writeUint64(1, f);
	}
	f = message.getChainId();
	if (f !== 0.0) {
		writer.writeEnum(2, f);
	}
	f = message.getChainRole();
	if (f !== 0.0) {
		writer.writeEnum(3, f);
	}
};

/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.db3_base_proto.BroadcastMeta.prototype.getNonce = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_base_proto.BroadcastMeta} returns this
 */
proto.db3_base_proto.BroadcastMeta.prototype.setNonce = function(value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional ChainId chain_id = 2;
 * @return {!proto.db3_base_proto.ChainId}
 */
proto.db3_base_proto.BroadcastMeta.prototype.getChainId = function() {
	return /** @type {!proto.db3_base_proto.ChainId} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		0,
	));
};

/**
 * @param {!proto.db3_base_proto.ChainId} value
 * @return {!proto.db3_base_proto.BroadcastMeta} returns this
 */
proto.db3_base_proto.BroadcastMeta.prototype.setChainId = function(value) {
	return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional ChainRole chain_role = 3;
 * @return {!proto.db3_base_proto.ChainRole}
 */
proto.db3_base_proto.BroadcastMeta.prototype.getChainRole = function() {
	return /** @type {!proto.db3_base_proto.ChainRole} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		0,
	));
};

/**
 * @param {!proto.db3_base_proto.ChainRole} value
 * @return {!proto.db3_base_proto.BroadcastMeta} returns this
 */
proto.db3_base_proto.BroadcastMeta.prototype.setChainRole = function(value) {
	return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * @enum {number}
 */
proto.db3_base_proto.UnitType = {
	DB3: 0,
	TAI: 1,
};

/**
 * @enum {number}
 */
proto.db3_base_proto.ChainRole = {
	SETTLEMENTCHAIN: 0,
	STORAGESHARDCHAIN: 10,
	DVMCOMPUTINGCHAIN: 20,
};

/**
 * @enum {number}
 */
proto.db3_base_proto.ChainId = {
	MAINNET: 0,
	TESTNET: 10,
	DEVNET: 20,
};

export default proto.db3_base_proto;
