// source: db3_session.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
import * as jspb from 'google-protobuf';
import db3_base_pb from './db3_base_pb';

var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.object.extend(proto, db3_base_pb);
goog.exportSymbol('proto.db3_session_proto.CloseSessionPayload', null, global);
goog.exportSymbol('proto.db3_session_proto.QuerySession', null, global);
goog.exportSymbol('proto.db3_session_proto.QuerySessionInfo', null, global);
goog.exportSymbol('proto.db3_session_proto.SessionStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_session_proto.QuerySessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_session_proto.QuerySessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.db3_session_proto.QuerySessionInfo.displayName = 'proto.db3_session_proto.QuerySessionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_session_proto.CloseSessionPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_session_proto.CloseSessionPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.db3_session_proto.CloseSessionPayload.displayName = 'proto.db3_session_proto.CloseSessionPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_session_proto.QuerySession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_session_proto.QuerySession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.db3_session_proto.QuerySession.displayName = 'proto.db3_session_proto.QuerySession';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.db3_session_proto.QuerySessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.db3_session_proto.QuerySessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.db3_session_proto.QuerySessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_session_proto.QuerySessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    queryCount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_session_proto.QuerySessionInfo}
 */
proto.db3_session_proto.QuerySessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.db3_session_proto.QuerySessionInfo;
  return proto.db3_session_proto.QuerySessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_session_proto.QuerySessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_session_proto.QuerySessionInfo}
 */
proto.db3_session_proto.QuerySessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {!proto.db3_session_proto.SessionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueryCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_session_proto.QuerySessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.db3_session_proto.QuerySessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_session_proto.QuerySessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_session_proto.QuerySessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getQueryCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.db3_session_proto.QuerySessionInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.db3_session_proto.QuerySessionInfo} returns this
 */
proto.db3_session_proto.QuerySessionInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 start_time = 2;
 * @return {number}
 */
proto.db3_session_proto.QuerySessionInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.db3_session_proto.QuerySessionInfo} returns this
 */
proto.db3_session_proto.QuerySessionInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SessionStatus status = 3;
 * @return {!proto.db3_session_proto.SessionStatus}
 */
proto.db3_session_proto.QuerySessionInfo.prototype.getStatus = function() {
  return /** @type {!proto.db3_session_proto.SessionStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.db3_session_proto.SessionStatus} value
 * @return {!proto.db3_session_proto.QuerySessionInfo} returns this
 */
proto.db3_session_proto.QuerySessionInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 query_count = 4;
 * @return {number}
 */
proto.db3_session_proto.QuerySessionInfo.prototype.getQueryCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.db3_session_proto.QuerySessionInfo} returns this
 */
proto.db3_session_proto.QuerySessionInfo.prototype.setQueryCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.db3_session_proto.CloseSessionPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.db3_session_proto.CloseSessionPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.db3_session_proto.CloseSessionPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_session_proto.CloseSessionPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionInfo: (f = msg.getSessionInfo()) && proto.db3_session_proto.QuerySessionInfo.toObject(includeInstance, f),
    sessionToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_session_proto.CloseSessionPayload}
 */
proto.db3_session_proto.CloseSessionPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.db3_session_proto.CloseSessionPayload;
  return proto.db3_session_proto.CloseSessionPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_session_proto.CloseSessionPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_session_proto.CloseSessionPayload}
 */
proto.db3_session_proto.CloseSessionPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.db3_session_proto.QuerySessionInfo;
      reader.readMessage(value,proto.db3_session_proto.QuerySessionInfo.deserializeBinaryFromReader);
      msg.setSessionInfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_session_proto.CloseSessionPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.db3_session_proto.CloseSessionPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_session_proto.CloseSessionPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_session_proto.CloseSessionPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.db3_session_proto.QuerySessionInfo.serializeBinaryToWriter
    );
  }
  f = message.getSessionToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional QuerySessionInfo session_info = 1;
 * @return {?proto.db3_session_proto.QuerySessionInfo}
 */
proto.db3_session_proto.CloseSessionPayload.prototype.getSessionInfo = function() {
  return /** @type{?proto.db3_session_proto.QuerySessionInfo} */ (
    jspb.Message.getWrapperField(this, proto.db3_session_proto.QuerySessionInfo, 1));
};


/**
 * @param {?proto.db3_session_proto.QuerySessionInfo|undefined} value
 * @return {!proto.db3_session_proto.CloseSessionPayload} returns this
*/
proto.db3_session_proto.CloseSessionPayload.prototype.setSessionInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_session_proto.CloseSessionPayload} returns this
 */
proto.db3_session_proto.CloseSessionPayload.prototype.clearSessionInfo = function() {
  return this.setSessionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_session_proto.CloseSessionPayload.prototype.hasSessionInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string session_token = 2;
 * @return {string}
 */
proto.db3_session_proto.CloseSessionPayload.prototype.getSessionToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.db3_session_proto.CloseSessionPayload} returns this
 */
proto.db3_session_proto.CloseSessionPayload.prototype.setSessionToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.db3_session_proto.QuerySession.prototype.toObject = function(opt_includeInstance) {
  return proto.db3_session_proto.QuerySession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.db3_session_proto.QuerySession} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_session_proto.QuerySession.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chainRole: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nodeQuerySessionInfo: (f = msg.getNodeQuerySessionInfo()) && proto.db3_session_proto.QuerySessionInfo.toObject(includeInstance, f),
    clientQuerySession: msg.getClientQuerySession_asB64(),
    clientSignature: msg.getClientSignature_asB64(),
    clientPublicKey: msg.getClientPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_session_proto.QuerySession}
 */
proto.db3_session_proto.QuerySession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.db3_session_proto.QuerySession;
  return proto.db3_session_proto.QuerySession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_session_proto.QuerySession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_session_proto.QuerySession}
 */
proto.db3_session_proto.QuerySession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!proto.db3_base_proto.ChainId} */ (reader.readEnum());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {!proto.db3_base_proto.ChainRole} */ (reader.readEnum());
      msg.setChainRole(value);
      break;
    case 4:
      var value = new proto.db3_session_proto.QuerySessionInfo;
      reader.readMessage(value,proto.db3_session_proto.QuerySessionInfo.deserializeBinaryFromReader);
      msg.setNodeQuerySessionInfo(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientQuerySession(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientSignature(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_session_proto.QuerySession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.db3_session_proto.QuerySession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_session_proto.QuerySession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_session_proto.QuerySession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getChainId();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getChainRole();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNodeQuerySessionInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.db3_session_proto.QuerySessionInfo.serializeBinaryToWriter
    );
  }
  f = message.getClientQuerySession_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getClientSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getClientPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.db3_session_proto.QuerySession.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.db3_session_proto.QuerySession} returns this
 */
proto.db3_session_proto.QuerySession.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional db3_base_proto.ChainId chain_id = 2;
 * @return {!proto.db3_base_proto.ChainId}
 */
proto.db3_session_proto.QuerySession.prototype.getChainId = function() {
  return /** @type {!proto.db3_base_proto.ChainId} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.db3_base_proto.ChainId} value
 * @return {!proto.db3_session_proto.QuerySession} returns this
 */
proto.db3_session_proto.QuerySession.prototype.setChainId = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional db3_base_proto.ChainRole chain_role = 3;
 * @return {!proto.db3_base_proto.ChainRole}
 */
proto.db3_session_proto.QuerySession.prototype.getChainRole = function() {
  return /** @type {!proto.db3_base_proto.ChainRole} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.db3_base_proto.ChainRole} value
 * @return {!proto.db3_session_proto.QuerySession} returns this
 */
proto.db3_session_proto.QuerySession.prototype.setChainRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional QuerySessionInfo node_query_session_info = 4;
 * @return {?proto.db3_session_proto.QuerySessionInfo}
 */
proto.db3_session_proto.QuerySession.prototype.getNodeQuerySessionInfo = function() {
  return /** @type{?proto.db3_session_proto.QuerySessionInfo} */ (
    jspb.Message.getWrapperField(this, proto.db3_session_proto.QuerySessionInfo, 4));
};


/**
 * @param {?proto.db3_session_proto.QuerySessionInfo|undefined} value
 * @return {!proto.db3_session_proto.QuerySession} returns this
*/
proto.db3_session_proto.QuerySession.prototype.setNodeQuerySessionInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_session_proto.QuerySession} returns this
 */
proto.db3_session_proto.QuerySession.prototype.clearNodeQuerySessionInfo = function() {
  return this.setNodeQuerySessionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_session_proto.QuerySession.prototype.hasNodeQuerySessionInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes client_query_session = 5;
 * @return {string}
 */
proto.db3_session_proto.QuerySession.prototype.getClientQuerySession = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes client_query_session = 5;
 * This is a type-conversion wrapper around `getClientQuerySession()`
 * @return {string}
 */
proto.db3_session_proto.QuerySession.prototype.getClientQuerySession_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientQuerySession()));
};


/**
 * optional bytes client_query_session = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientQuerySession()`
 * @return {!Uint8Array}
 */
proto.db3_session_proto.QuerySession.prototype.getClientQuerySession_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientQuerySession()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_session_proto.QuerySession} returns this
 */
proto.db3_session_proto.QuerySession.prototype.setClientQuerySession = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes client_signature = 6;
 * @return {string}
 */
proto.db3_session_proto.QuerySession.prototype.getClientSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes client_signature = 6;
 * This is a type-conversion wrapper around `getClientSignature()`
 * @return {string}
 */
proto.db3_session_proto.QuerySession.prototype.getClientSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientSignature()));
};


/**
 * optional bytes client_signature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientSignature()`
 * @return {!Uint8Array}
 */
proto.db3_session_proto.QuerySession.prototype.getClientSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_session_proto.QuerySession} returns this
 */
proto.db3_session_proto.QuerySession.prototype.setClientSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes client_public_key = 7;
 * @return {string}
 */
proto.db3_session_proto.QuerySession.prototype.getClientPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes client_public_key = 7;
 * This is a type-conversion wrapper around `getClientPublicKey()`
 * @return {string}
 */
proto.db3_session_proto.QuerySession.prototype.getClientPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientPublicKey()));
};


/**
 * optional bytes client_public_key = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientPublicKey()`
 * @return {!Uint8Array}
 */
proto.db3_session_proto.QuerySession.prototype.getClientPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_session_proto.QuerySession} returns this
 */
proto.db3_session_proto.QuerySession.prototype.setClientPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.db3_session_proto.SessionStatus = {
  RUNNING: 0,
  BLOCKED: 1,
  STOP: 2
};

export default  proto.db3_session_proto;
