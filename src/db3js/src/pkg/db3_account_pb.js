// source: db3_account.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import * as jspb from "google-protobuf";
import db3_base_pb from "./db3_base_pb.js";
var goog = jspb;
var global = function() {
	return this || window || global || self || Function("return this")();
}.call(null);

goog.object.extend(proto, db3_base_pb);
goog.exportSymbol("proto.db3_account_proto.Account", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_account_proto.Account = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_account_proto.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_account_proto.Account.displayName =
		"proto.db3_account_proto.Account";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_account_proto.Account.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_account_proto.Account.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_account_proto.Account} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_account_proto.Account.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				totalBills:
					(f = msg.getTotalBills()) &&
					db3_base_pb.Units.toObject(includeInstance, f),
				totalStorageInBytes: jspb.Message.getFieldWithDefault(
					msg,
					2,
					0,
				),
				totalMutationCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
				totalQuerySessionCount: jspb.Message.getFieldWithDefault(
					msg,
					4,
					0,
				),
				credits:
					(f = msg.getCredits()) &&
					db3_base_pb.Units.toObject(includeInstance, f),
				nonce: jspb.Message.getFieldWithDefault(msg, 6, 0),
				billNextId: jspb.Message.getFieldWithDefault(msg, 7, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_account_proto.Account}
 */
proto.db3_account_proto.Account.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_account_proto.Account();
	return proto.db3_account_proto.Account.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_account_proto.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_account_proto.Account}
 */
proto.db3_account_proto.Account.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_base_pb.Units();
				reader.readMessage(
					value,
					db3_base_pb.Units.deserializeBinaryFromReader,
				);
				msg.setTotalBills(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setTotalStorageInBytes(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setTotalMutationCount(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setTotalQuerySessionCount(value);
				break;
			case 5:
				var value = new db3_base_pb.Units();
				reader.readMessage(
					value,
					db3_base_pb.Units.deserializeBinaryFromReader,
				);
				msg.setCredits(value);
				break;
			case 6:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setNonce(value);
				break;
			case 7:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setBillNextId(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_account_proto.Account.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_account_proto.Account.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_account_proto.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_account_proto.Account.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getTotalBills();
	if (f != null) {
		writer.writeMessage(1, f, db3_base_pb.Units.serializeBinaryToWriter);
	}
	f = message.getTotalStorageInBytes();
	if (f !== 0) {
		writer.writeUint64(2, f);
	}
	f = message.getTotalMutationCount();
	if (f !== 0) {
		writer.writeUint64(3, f);
	}
	f = message.getTotalQuerySessionCount();
	if (f !== 0) {
		writer.writeUint64(4, f);
	}
	f = message.getCredits();
	if (f != null) {
		writer.writeMessage(5, f, db3_base_pb.Units.serializeBinaryToWriter);
	}
	f = message.getNonce();
	if (f !== 0) {
		writer.writeUint64(6, f);
	}
	f = message.getBillNextId();
	if (f !== 0) {
		writer.writeUint64(7, f);
	}
};

/**
 * optional db3_base_proto.Units total_bills = 1;
 * @return {?proto.db3_base_proto.Units}
 */
proto.db3_account_proto.Account.prototype.getTotalBills = function() {
	return /** @type{?proto.db3_base_proto.Units} */ (jspb.Message.getWrapperField(
		this,
		db3_base_pb.Units,
		1,
	));
};

/**
 * @param {?proto.db3_base_proto.Units|undefined} value
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.setTotalBills = function(value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.clearTotalBills = function() {
	return this.setTotalBills(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_account_proto.Account.prototype.hasTotalBills = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional uint64 total_storage_in_bytes = 2;
 * @return {number}
 */
proto.db3_account_proto.Account.prototype.getTotalStorageInBytes = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.setTotalStorageInBytes = function(
	value,
) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 total_mutation_count = 3;
 * @return {number}
 */
proto.db3_account_proto.Account.prototype.getTotalMutationCount = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.setTotalMutationCount = function(
	value,
) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 total_query_session_count = 4;
 * @return {number}
 */
proto.db3_account_proto.Account.prototype.getTotalQuerySessionCount = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.setTotalQuerySessionCount = function(
	value,
) {
	return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional db3_base_proto.Units credits = 5;
 * @return {?proto.db3_base_proto.Units}
 */
proto.db3_account_proto.Account.prototype.getCredits = function() {
	return /** @type{?proto.db3_base_proto.Units} */ (jspb.Message.getWrapperField(
		this,
		db3_base_pb.Units,
		5,
	));
};

/**
 * @param {?proto.db3_base_proto.Units|undefined} value
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.setCredits = function(value) {
	return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.clearCredits = function() {
	return this.setCredits(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_account_proto.Account.prototype.hasCredits = function() {
	return jspb.Message.getField(this, 5) != null;
};

/**
 * optional uint64 nonce = 6;
 * @return {number}
 */
proto.db3_account_proto.Account.prototype.getNonce = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.setNonce = function(value) {
	return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional uint64 bill_next_id = 7;
 * @return {number}
 */
proto.db3_account_proto.Account.prototype.getBillNextId = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_account_proto.Account} returns this
 */
proto.db3_account_proto.Account.prototype.setBillNextId = function(value) {
	return jspb.Message.setProto3IntField(this, 7, value);
};

export default proto.db3_account_proto;
