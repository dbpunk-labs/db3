// source: db3_node.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import jspb from "google-protobuf";
import db3_bill_pb from "./db3_bill_pb.js";
import db3_mutation_pb from "./db3_mutation_pb.js";
import db3_account_pb from "./db3_account_pb.js";

var goog = jspb;
var global = function () {
	return this || window || global || self || Function("return this")();
}.call(null);

goog.object.extend(proto, db3_bill_pb);
goog.object.extend(proto, db3_mutation_pb);
goog.object.extend(proto, db3_account_pb);
goog.exportSymbol("proto.db3_node_proto.BatchGetKey", null, global);
goog.exportSymbol("proto.db3_node_proto.BatchGetValue", null, global);
goog.exportSymbol("proto.db3_node_proto.BatchRangeKey", null, global);
goog.exportSymbol("proto.db3_node_proto.BroadcastRequest", null, global);
goog.exportSymbol("proto.db3_node_proto.BroadcastResponse", null, global);
goog.exportSymbol("proto.db3_node_proto.GetAccountRequest", null, global);
goog.exportSymbol("proto.db3_node_proto.GetKeyRequest", null, global);
goog.exportSymbol("proto.db3_node_proto.GetKeyResponse", null, global);
goog.exportSymbol("proto.db3_node_proto.GetSessionInfoRequest", null, global);
goog.exportSymbol("proto.db3_node_proto.GetSessionInfoResponse", null, global);
goog.exportSymbol("proto.db3_node_proto.QueryBillRequest", null, global);
goog.exportSymbol("proto.db3_node_proto.QueryBillResponse", null, global);
goog.exportSymbol("proto.db3_node_proto.QuerySessionInfo", null, global);
goog.exportSymbol("proto.db3_node_proto.Range", null, global);
goog.exportSymbol("proto.db3_node_proto.RestartSessionRequest", null, global);
goog.exportSymbol("proto.db3_node_proto.RestartSessionResponse", null, global);
goog.exportSymbol("proto.db3_node_proto.SessionStatus", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.QueryBillRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.QueryBillRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.QueryBillRequest.displayName =
		"proto.db3_node_proto.QueryBillRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.QueryBillResponse = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.QueryBillResponse.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.QueryBillResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.QueryBillResponse.displayName =
		"proto.db3_node_proto.QueryBillResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.Range = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.Range.displayName = "proto.db3_node_proto.Range";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BatchRangeKey = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.BatchRangeKey.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.BatchRangeKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BatchRangeKey.displayName =
		"proto.db3_node_proto.BatchRangeKey";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BatchGetKey = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.BatchGetKey.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.BatchGetKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BatchGetKey.displayName =
		"proto.db3_node_proto.BatchGetKey";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BatchGetValue = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.BatchGetValue.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.BatchGetValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BatchGetValue.displayName =
		"proto.db3_node_proto.BatchGetValue";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetKeyRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetKeyRequest.displayName =
		"proto.db3_node_proto.GetKeyRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetKeyResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetKeyResponse.displayName =
		"proto.db3_node_proto.GetKeyResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.RestartSessionRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.RestartSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.RestartSessionRequest.displayName =
		"proto.db3_node_proto.RestartSessionRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.RestartSessionResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.RestartSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.RestartSessionResponse.displayName =
		"proto.db3_node_proto.RestartSessionResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetAccountRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetAccountRequest.displayName =
		"proto.db3_node_proto.GetAccountRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetSessionInfoRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetSessionInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetSessionInfoRequest.displayName =
		"proto.db3_node_proto.GetSessionInfoRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.QuerySessionInfo = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.QuerySessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.QuerySessionInfo.displayName =
		"proto.db3_node_proto.QuerySessionInfo";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetSessionInfoResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetSessionInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetSessionInfoResponse.displayName =
		"proto.db3_node_proto.GetSessionInfoResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BroadcastRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.BroadcastRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BroadcastRequest.displayName =
		"proto.db3_node_proto.BroadcastRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BroadcastResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.BroadcastResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BroadcastResponse.displayName =
		"proto.db3_node_proto.BroadcastResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.QueryBillRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.QueryBillRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.QueryBillRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.QueryBillRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				height: jspb.Message.getFieldWithDefault(msg, 1, 0),
				startId: jspb.Message.getFieldWithDefault(msg, 2, 0),
				endId: jspb.Message.getFieldWithDefault(msg, 3, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.QueryBillRequest}
 */
proto.db3_node_proto.QueryBillRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.QueryBillRequest();
	return proto.db3_node_proto.QueryBillRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.QueryBillRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.QueryBillRequest}
 */
proto.db3_node_proto.QueryBillRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setHeight(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setStartId(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setEndId(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.QueryBillRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.QueryBillRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.QueryBillRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.QueryBillRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getHeight();
	if (f !== 0) {
		writer.writeUint64(1, f);
	}
	f = message.getStartId();
	if (f !== 0) {
		writer.writeUint64(2, f);
	}
	f = message.getEndId();
	if (f !== 0) {
		writer.writeUint64(3, f);
	}
};

/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.db3_node_proto.QueryBillRequest.prototype.getHeight = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QueryBillRequest} returns this
 */
proto.db3_node_proto.QueryBillRequest.prototype.setHeight = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 start_id = 2;
 * @return {number}
 */
proto.db3_node_proto.QueryBillRequest.prototype.getStartId = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QueryBillRequest} returns this
 */
proto.db3_node_proto.QueryBillRequest.prototype.setStartId = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 end_id = 3;
 * @return {number}
 */
proto.db3_node_proto.QueryBillRequest.prototype.getEndId = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QueryBillRequest} returns this
 */
proto.db3_node_proto.QueryBillRequest.prototype.setEndId = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.QueryBillResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.QueryBillResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.QueryBillResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.QueryBillResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.QueryBillResponse.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				billsList: jspb.Message.toObjectList(
					msg.getBillsList(),
					db3_bill_pb.Bill.toObject,
					includeInstance,
				),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.QueryBillResponse}
 */
proto.db3_node_proto.QueryBillResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.QueryBillResponse();
	return proto.db3_node_proto.QueryBillResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.QueryBillResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.QueryBillResponse}
 */
proto.db3_node_proto.QueryBillResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_bill_pb.Bill();
				reader.readMessage(
					value,
					db3_bill_pb.Bill.deserializeBinaryFromReader,
				);
				msg.addBills(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.QueryBillResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.QueryBillResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.QueryBillResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.QueryBillResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getBillsList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			db3_bill_pb.Bill.serializeBinaryToWriter,
		);
	}
};

/**
 * repeated db3_bill_proto.Bill bills = 1;
 * @return {!Array<!proto.db3_bill_proto.Bill>}
 */
proto.db3_node_proto.QueryBillResponse.prototype.getBillsList = function () {
	return /** @type{!Array<!proto.db3_bill_proto.Bill>} */ (
		jspb.Message.getRepeatedWrapperField(this, db3_bill_pb.Bill, 1)
	);
};

/**
 * @param {!Array<!proto.db3_bill_proto.Bill>} value
 * @return {!proto.db3_node_proto.QueryBillResponse} returns this
 */
proto.db3_node_proto.QueryBillResponse.prototype.setBillsList = function (
	value,
) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.db3_bill_proto.Bill=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db3_bill_proto.Bill}
 */
proto.db3_node_proto.QueryBillResponse.prototype.addBills = function (
	opt_value,
	opt_index,
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.db3_bill_proto.Bill,
		opt_index,
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.QueryBillResponse} returns this
 */
proto.db3_node_proto.QueryBillResponse.prototype.clearBillsList = function () {
	return this.setBillsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.Range.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.Range.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.Range} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.Range.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				start: msg.getStart_asB64(),
				end: msg.getEnd_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.Range}
 */
proto.db3_node_proto.Range.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.Range();
	return proto.db3_node_proto.Range.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.Range}
 */
proto.db3_node_proto.Range.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setStart(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setEnd(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.Range.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.Range.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.Range.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getStart_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getEnd_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
};

/**
 * optional bytes start = 1;
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getStart = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * optional bytes start = 1;
 * This is a type-conversion wrapper around `getStart()`
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getStart_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getStart()));
};

/**
 * optional bytes start = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStart()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.Range.prototype.getStart_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getStart()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.Range} returns this
 */
proto.db3_node_proto.Range.prototype.setStart = function (value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes end = 2;
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getEnd = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 2, "")
	);
};

/**
 * optional bytes end = 2;
 * This is a type-conversion wrapper around `getEnd()`
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getEnd_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEnd()));
};

/**
 * optional bytes end = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEnd()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.Range.prototype.getEnd_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEnd()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.Range} returns this
 */
proto.db3_node_proto.Range.prototype.setEnd = function (value) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.BatchRangeKey.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BatchRangeKey.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BatchRangeKey.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BatchRangeKey} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BatchRangeKey.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				ns: msg.getNs_asB64(),
				rangeList: jspb.Message.toObjectList(
					msg.getRangeList(),
					proto.db3_node_proto.Range.toObject,
					includeInstance,
				),
				session: jspb.Message.getFieldWithDefault(msg, 3, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BatchRangeKey}
 */
proto.db3_node_proto.BatchRangeKey.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BatchRangeKey();
	return proto.db3_node_proto.BatchRangeKey.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BatchRangeKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BatchRangeKey}
 */
proto.db3_node_proto.BatchRangeKey.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setNs(value);
				break;
			case 2:
				var value = new proto.db3_node_proto.Range();
				reader.readMessage(
					value,
					proto.db3_node_proto.Range.deserializeBinaryFromReader,
				);
				msg.addRange(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setSession(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchRangeKey.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BatchRangeKey.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BatchRangeKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BatchRangeKey.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getNs_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getRangeList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			2,
			f,
			proto.db3_node_proto.Range.serializeBinaryToWriter,
		);
	}
	f = message.getSession();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
};

/**
 * optional bytes ns = 1;
 * @return {string}
 */
proto.db3_node_proto.BatchRangeKey.prototype.getNs = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * optional bytes ns = 1;
 * This is a type-conversion wrapper around `getNs()`
 * @return {string}
 */
proto.db3_node_proto.BatchRangeKey.prototype.getNs_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNs()));
};

/**
 * optional bytes ns = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNs()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchRangeKey.prototype.getNs_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BatchRangeKey} returns this
 */
proto.db3_node_proto.BatchRangeKey.prototype.setNs = function (value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * repeated Range range = 2;
 * @return {!Array<!proto.db3_node_proto.Range>}
 */
proto.db3_node_proto.BatchRangeKey.prototype.getRangeList = function () {
	return /** @type{!Array<!proto.db3_node_proto.Range>} */ (
		jspb.Message.getRepeatedWrapperField(
			this,
			proto.db3_node_proto.Range,
			2,
		)
	);
};

/**
 * @param {!Array<!proto.db3_node_proto.Range>} value
 * @return {!proto.db3_node_proto.BatchRangeKey} returns this
 */
proto.db3_node_proto.BatchRangeKey.prototype.setRangeList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.db3_node_proto.Range=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db3_node_proto.Range}
 */
proto.db3_node_proto.BatchRangeKey.prototype.addRange = function (
	opt_value,
	opt_index,
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		2,
		opt_value,
		proto.db3_node_proto.Range,
		opt_index,
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.BatchRangeKey} returns this
 */
proto.db3_node_proto.BatchRangeKey.prototype.clearRangeList = function () {
	return this.setRangeList([]);
};

/**
 * optional int32 session = 3;
 * @return {number}
 */
proto.db3_node_proto.BatchRangeKey.prototype.getSession = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.BatchRangeKey} returns this
 */
proto.db3_node_proto.BatchRangeKey.prototype.setSession = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.BatchGetKey.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BatchGetKey.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BatchGetKey.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BatchGetKey} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BatchGetKey.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				ns: msg.getNs_asB64(),
				keysList: msg.getKeysList_asB64(),
				session: jspb.Message.getFieldWithDefault(msg, 3, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BatchGetKey}
 */
proto.db3_node_proto.BatchGetKey.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BatchGetKey();
	return proto.db3_node_proto.BatchGetKey.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BatchGetKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BatchGetKey}
 */
proto.db3_node_proto.BatchGetKey.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setNs(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.addKeys(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setSession(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetKey.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BatchGetKey.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BatchGetKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BatchGetKey.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getNs_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getKeysList_asU8();
	if (f.length > 0) {
		writer.writeRepeatedBytes(2, f);
	}
	f = message.getSession();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
};

/**
 * optional bytes ns = 1;
 * @return {string}
 */
proto.db3_node_proto.BatchGetKey.prototype.getNs = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * optional bytes ns = 1;
 * This is a type-conversion wrapper around `getNs()`
 * @return {string}
 */
proto.db3_node_proto.BatchGetKey.prototype.getNs_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNs()));
};

/**
 * optional bytes ns = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNs()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetKey.prototype.getNs_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.setNs = function (value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * repeated bytes keys = 2;
 * @return {!Array<string>}
 */
proto.db3_node_proto.BatchGetKey.prototype.getKeysList = function () {
	return /** @type {!Array<string>} */ (
		jspb.Message.getRepeatedField(this, 2)
	);
};

/**
 * repeated bytes keys = 2;
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<string>}
 */
proto.db3_node_proto.BatchGetKey.prototype.getKeysList_asB64 = function () {
	return /** @type {!Array<string>} */ (
		jspb.Message.bytesListAsB64(this.getKeysList())
	);
};

/**
 * repeated bytes keys = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.db3_node_proto.BatchGetKey.prototype.getKeysList_asU8 = function () {
	return /** @type {!Array<!Uint8Array>} */ (
		jspb.Message.bytesListAsU8(this.getKeysList())
	);
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.setKeysList = function (value) {
	return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.addKeys = function (
	value,
	opt_index,
) {
	return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.clearKeysList = function () {
	return this.setKeysList([]);
};

/**
 * optional int32 session = 3;
 * @return {number}
 */
proto.db3_node_proto.BatchGetKey.prototype.getSession = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.setSession = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.BatchGetValue.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BatchGetValue.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BatchGetValue.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BatchGetValue} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BatchGetValue.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				valuesList: jspb.Message.toObjectList(
					msg.getValuesList(),
					db3_mutation_pb.KVPair.toObject,
					includeInstance,
				),
				session: jspb.Message.getFieldWithDefault(msg, 2, 0),
				ns: msg.getNs_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BatchGetValue}
 */
proto.db3_node_proto.BatchGetValue.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BatchGetValue();
	return proto.db3_node_proto.BatchGetValue.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BatchGetValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BatchGetValue}
 */
proto.db3_node_proto.BatchGetValue.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_mutation_pb.KVPair();
				reader.readMessage(
					value,
					db3_mutation_pb.KVPair.deserializeBinaryFromReader,
				);
				msg.addValues(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setSession(value);
				break;
			case 3:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setNs(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetValue.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BatchGetValue.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BatchGetValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BatchGetValue.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getValuesList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			db3_mutation_pb.KVPair.serializeBinaryToWriter,
		);
	}
	f = message.getSession();
	if (f !== 0) {
		writer.writeInt32(2, f);
	}
	f = message.getNs_asU8();
	if (f.length > 0) {
		writer.writeBytes(3, f);
	}
};

/**
 * repeated db3_mutation_proto.KVPair values = 1;
 * @return {!Array<!proto.db3_mutation_proto.KVPair>}
 */
proto.db3_node_proto.BatchGetValue.prototype.getValuesList = function () {
	return /** @type{!Array<!proto.db3_mutation_proto.KVPair>} */ (
		jspb.Message.getRepeatedWrapperField(this, db3_mutation_pb.KVPair, 1)
	);
};

/**
 * @param {!Array<!proto.db3_mutation_proto.KVPair>} value
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.setValuesList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.db3_mutation_proto.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db3_mutation_proto.KVPair}
 */
proto.db3_node_proto.BatchGetValue.prototype.addValues = function (
	opt_value,
	opt_index,
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.db3_mutation_proto.KVPair,
		opt_index,
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.clearValuesList = function () {
	return this.setValuesList([]);
};

/**
 * optional int32 session = 2;
 * @return {number}
 */
proto.db3_node_proto.BatchGetValue.prototype.getSession = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.setSession = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes ns = 3;
 * @return {string}
 */
proto.db3_node_proto.BatchGetValue.prototype.getNs = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 3, "")
	);
};

/**
 * optional bytes ns = 3;
 * This is a type-conversion wrapper around `getNs()`
 * @return {string}
 */
proto.db3_node_proto.BatchGetValue.prototype.getNs_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNs()));
};

/**
 * optional bytes ns = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNs()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetValue.prototype.getNs_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.setNs = function (value) {
	return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetKeyRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetKeyRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetKeyRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetKeyRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				batchGet: msg.getBatchGet_asB64(),
				signature: msg.getSignature_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetKeyRequest}
 */
proto.db3_node_proto.GetKeyRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetKeyRequest();
	return proto.db3_node_proto.GetKeyRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetKeyRequest}
 */
proto.db3_node_proto.GetKeyRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setBatchGet(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setSignature(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetKeyRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetKeyRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetKeyRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getBatchGet_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getSignature_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
};

/**
 * optional bytes batch_get = 1;
 * @return {string}
 */
proto.db3_node_proto.GetKeyRequest.prototype.getBatchGet = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * optional bytes batch_get = 1;
 * This is a type-conversion wrapper around `getBatchGet()`
 * @return {string}
 */
proto.db3_node_proto.GetKeyRequest.prototype.getBatchGet_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBatchGet()));
};

/**
 * optional bytes batch_get = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBatchGet()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetKeyRequest.prototype.getBatchGet_asU8 = function () {
	return /** @type {!Uint8Array} */ (
		jspb.Message.bytesAsU8(this.getBatchGet())
	);
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.GetKeyRequest} returns this
 */
proto.db3_node_proto.GetKeyRequest.prototype.setBatchGet = function (value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.db3_node_proto.GetKeyRequest.prototype.getSignature = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 2, "")
	);
};

/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.db3_node_proto.GetKeyRequest.prototype.getSignature_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetKeyRequest.prototype.getSignature_asU8 = function () {
	return /** @type {!Uint8Array} */ (
		jspb.Message.bytesAsU8(this.getSignature())
	);
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.GetKeyRequest} returns this
 */
proto.db3_node_proto.GetKeyRequest.prototype.setSignature = function (value) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetKeyResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetKeyResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetKeyResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetKeyResponse.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				signature: msg.getSignature_asB64(),
				batchGetValues:
					(f = msg.getBatchGetValues()) &&
					proto.db3_node_proto.BatchGetValue.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetKeyResponse}
 */
proto.db3_node_proto.GetKeyResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetKeyResponse();
	return proto.db3_node_proto.GetKeyResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetKeyResponse}
 */
proto.db3_node_proto.GetKeyResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setSignature(value);
				break;
			case 2:
				var value = new proto.db3_node_proto.BatchGetValue();
				reader.readMessage(
					value,
					proto.db3_node_proto.BatchGetValue
						.deserializeBinaryFromReader,
				);
				msg.setBatchGetValues(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetKeyResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetKeyResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetKeyResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getSignature_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getBatchGetValues();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.db3_node_proto.BatchGetValue.serializeBinaryToWriter,
		);
	}
};

/**
 * optional bytes signature = 1;
 * @return {string}
 */
proto.db3_node_proto.GetKeyResponse.prototype.getSignature = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.db3_node_proto.GetKeyResponse.prototype.getSignature_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetKeyResponse.prototype.getSignature_asU8 = function () {
	return /** @type {!Uint8Array} */ (
		jspb.Message.bytesAsU8(this.getSignature())
	);
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.GetKeyResponse} returns this
 */
proto.db3_node_proto.GetKeyResponse.prototype.setSignature = function (value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional BatchGetValue batch_get_values = 2;
 * @return {?proto.db3_node_proto.BatchGetValue}
 */
proto.db3_node_proto.GetKeyResponse.prototype.getBatchGetValues = function () {
	return /** @type{?proto.db3_node_proto.BatchGetValue} */ (
		jspb.Message.getWrapperField(
			this,
			proto.db3_node_proto.BatchGetValue,
			2,
		)
	);
};

/**
 * @param {?proto.db3_node_proto.BatchGetValue|undefined} value
 * @return {!proto.db3_node_proto.GetKeyResponse} returns this
 */
proto.db3_node_proto.GetKeyResponse.prototype.setBatchGetValues = function (
	value,
) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetKeyResponse} returns this
 */
proto.db3_node_proto.GetKeyResponse.prototype.clearBatchGetValues =
	function () {
		return this.setBatchGetValues(undefined);
	};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetKeyResponse.prototype.hasBatchGetValues = function () {
	return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.RestartSessionRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.RestartSessionRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.RestartSessionRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.RestartSessionRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				querySessionInfo: msg.getQuerySessionInfo_asB64(),
				signature: msg.getSignature_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.RestartSessionRequest}
 */
proto.db3_node_proto.RestartSessionRequest.deserializeBinary = function (
	bytes,
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.RestartSessionRequest();
	return proto.db3_node_proto.RestartSessionRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.RestartSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.RestartSessionRequest}
 */
proto.db3_node_proto.RestartSessionRequest.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 1:
					var value = /** @type {!Uint8Array} */ (reader.readBytes());
					msg.setQuerySessionInfo(value);
					break;
				case 2:
					var value = /** @type {!Uint8Array} */ (reader.readBytes());
					msg.setSignature(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RestartSessionRequest.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.db3_node_proto.RestartSessionRequest.serializeBinaryToWriter(
			this,
			writer,
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.RestartSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.RestartSessionRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getQuerySessionInfo_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getSignature_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
};

/**
 * optional bytes query_session_info = 1;
 * @return {string}
 */
proto.db3_node_proto.RestartSessionRequest.prototype.getQuerySessionInfo =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 1, "")
		);
	};

/**
 * optional bytes query_session_info = 1;
 * This is a type-conversion wrapper around `getQuerySessionInfo()`
 * @return {string}
 */
proto.db3_node_proto.RestartSessionRequest.prototype.getQuerySessionInfo_asB64 =
	function () {
		return /** @type {string} */ (
			jspb.Message.bytesAsB64(this.getQuerySessionInfo())
		);
	};

/**
 * optional bytes query_session_info = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuerySessionInfo()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RestartSessionRequest.prototype.getQuerySessionInfo_asU8 =
	function () {
		return /** @type {!Uint8Array} */ (
			jspb.Message.bytesAsU8(this.getQuerySessionInfo())
		);
	};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.RestartSessionRequest} returns this
 */
proto.db3_node_proto.RestartSessionRequest.prototype.setQuerySessionInfo =
	function (value) {
		return jspb.Message.setProto3BytesField(this, 1, value);
	};

/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.db3_node_proto.RestartSessionRequest.prototype.getSignature =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 2, "")
		);
	};

/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.db3_node_proto.RestartSessionRequest.prototype.getSignature_asB64 =
	function () {
		return /** @type {string} */ (
			jspb.Message.bytesAsB64(this.getSignature())
		);
	};

/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RestartSessionRequest.prototype.getSignature_asU8 =
	function () {
		return /** @type {!Uint8Array} */ (
			jspb.Message.bytesAsU8(this.getSignature())
		);
	};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.RestartSessionRequest} returns this
 */
proto.db3_node_proto.RestartSessionRequest.prototype.setSignature = function (
	value,
) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.RestartSessionResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.RestartSessionResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.RestartSessionResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.RestartSessionResponse.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				session: jspb.Message.getFieldWithDefault(msg, 3, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.RestartSessionResponse}
 */
proto.db3_node_proto.RestartSessionResponse.deserializeBinary = function (
	bytes,
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.RestartSessionResponse();
	return proto.db3_node_proto.RestartSessionResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.RestartSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.RestartSessionResponse}
 */
proto.db3_node_proto.RestartSessionResponse.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 3:
					var value = /** @type {number} */ (reader.readInt32());
					msg.setSession(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RestartSessionResponse.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.db3_node_proto.RestartSessionResponse.serializeBinaryToWriter(
			this,
			writer,
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.RestartSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.RestartSessionResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getSession();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
};

/**
 * optional int32 session = 3;
 * @return {number}
 */
proto.db3_node_proto.RestartSessionResponse.prototype.getSession = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.RestartSessionResponse} returns this
 */
proto.db3_node_proto.RestartSessionResponse.prototype.setSession = function (
	value,
) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetAccountRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetAccountRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetAccountRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetAccountRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetAccountRequest}
 */
proto.db3_node_proto.GetAccountRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetAccountRequest();
	return proto.db3_node_proto.GetAccountRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetAccountRequest}
 */
proto.db3_node_proto.GetAccountRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setAddr(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetAccountRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetAccountRequest.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetAccountRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getAddr();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string addr = 1;
 * @return {string}
 */
proto.db3_node_proto.GetAccountRequest.prototype.getAddr = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.GetAccountRequest} returns this
 */
proto.db3_node_proto.GetAccountRequest.prototype.setAddr = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetSessionInfoRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetSessionInfoRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetSessionInfoRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetSessionInfoRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetSessionInfoRequest}
 */
proto.db3_node_proto.GetSessionInfoRequest.deserializeBinary = function (
	bytes,
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetSessionInfoRequest();
	return proto.db3_node_proto.GetSessionInfoRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetSessionInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetSessionInfoRequest}
 */
proto.db3_node_proto.GetSessionInfoRequest.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 1:
					var value = /** @type {string} */ (reader.readString());
					msg.setAddr(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.db3_node_proto.GetSessionInfoRequest.serializeBinaryToWriter(
			this,
			writer,
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetSessionInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetSessionInfoRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getAddr();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string addr = 1;
 * @return {string}
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.getAddr = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.GetSessionInfoRequest} returns this
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.setAddr = function (
	value,
) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.QuerySessionInfo.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.QuerySessionInfo.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.QuerySessionInfo} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.QuerySessionInfo.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				id: jspb.Message.getFieldWithDefault(msg, 1, 0),
				startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
				status: jspb.Message.getFieldWithDefault(msg, 3, 0),
				queryCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.QuerySessionInfo}
 */
proto.db3_node_proto.QuerySessionInfo.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.QuerySessionInfo();
	return proto.db3_node_proto.QuerySessionInfo.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.QuerySessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.QuerySessionInfo}
 */
proto.db3_node_proto.QuerySessionInfo.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setId(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setStartTime(value);
				break;
			case 3:
				var value = /** @type {!proto.db3_node_proto.SessionStatus} */ (
					reader.readEnum()
				);
				msg.setStatus(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setQueryCount(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.QuerySessionInfo.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.QuerySessionInfo.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.QuerySessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.QuerySessionInfo.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getId();
	if (f !== 0) {
		writer.writeInt32(1, f);
	}
	f = message.getStartTime();
	if (f !== 0) {
		writer.writeInt64(2, f);
	}
	f = message.getStatus();
	if (f !== 0.0) {
		writer.writeEnum(3, f);
	}
	f = message.getQueryCount();
	if (f !== 0) {
		writer.writeInt32(4, f);
	}
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.db3_node_proto.QuerySessionInfo.prototype.getId = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QuerySessionInfo} returns this
 */
proto.db3_node_proto.QuerySessionInfo.prototype.setId = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 start_time = 2;
 * @return {number}
 */
proto.db3_node_proto.QuerySessionInfo.prototype.getStartTime = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QuerySessionInfo} returns this
 */
proto.db3_node_proto.QuerySessionInfo.prototype.setStartTime = function (
	value,
) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional SessionStatus status = 3;
 * @return {!proto.db3_node_proto.SessionStatus}
 */
proto.db3_node_proto.QuerySessionInfo.prototype.getStatus = function () {
	return /** @type {!proto.db3_node_proto.SessionStatus} */ (
		jspb.Message.getFieldWithDefault(this, 3, 0)
	);
};

/**
 * @param {!proto.db3_node_proto.SessionStatus} value
 * @return {!proto.db3_node_proto.QuerySessionInfo} returns this
 */
proto.db3_node_proto.QuerySessionInfo.prototype.setStatus = function (value) {
	return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional int32 query_count = 4;
 * @return {number}
 */
proto.db3_node_proto.QuerySessionInfo.prototype.getQueryCount = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QuerySessionInfo} returns this
 */
proto.db3_node_proto.QuerySessionInfo.prototype.setQueryCount = function (
	value,
) {
	return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetSessionInfoResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetSessionInfoResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetSessionInfoResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetSessionInfoResponse.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				signature: msg.getSignature_asB64(),
				sessionInfo:
					(f = msg.getSessionInfo()) &&
					proto.db3_node_proto.QuerySessionInfo.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetSessionInfoResponse}
 */
proto.db3_node_proto.GetSessionInfoResponse.deserializeBinary = function (
	bytes,
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetSessionInfoResponse();
	return proto.db3_node_proto.GetSessionInfoResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetSessionInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetSessionInfoResponse}
 */
proto.db3_node_proto.GetSessionInfoResponse.deserializeBinaryFromReader =
	function (msg, reader) {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			var field = reader.getFieldNumber();
			switch (field) {
				case 1:
					var value = /** @type {!Uint8Array} */ (reader.readBytes());
					msg.setSignature(value);
					break;
				case 2:
					var value = new proto.db3_node_proto.QuerySessionInfo();
					reader.readMessage(
						value,
						proto.db3_node_proto.QuerySessionInfo
							.deserializeBinaryFromReader,
					);
					msg.setSessionInfo(value);
					break;
				default:
					reader.skipField();
					break;
			}
		}
		return msg;
	};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.serializeBinary =
	function () {
		var writer = new jspb.BinaryWriter();
		proto.db3_node_proto.GetSessionInfoResponse.serializeBinaryToWriter(
			this,
			writer,
		);
		return writer.getResultBuffer();
	};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetSessionInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetSessionInfoResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getSignature_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getSessionInfo();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.db3_node_proto.QuerySessionInfo.serializeBinaryToWriter,
		);
	}
};

/**
 * optional bytes signature = 1;
 * @return {string}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.getSignature =
	function () {
		return /** @type {string} */ (
			jspb.Message.getFieldWithDefault(this, 1, "")
		);
	};

/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.getSignature_asB64 =
	function () {
		return /** @type {string} */ (
			jspb.Message.bytesAsB64(this.getSignature())
		);
	};

/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.getSignature_asU8 =
	function () {
		return /** @type {!Uint8Array} */ (
			jspb.Message.bytesAsU8(this.getSignature())
		);
	};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.GetSessionInfoResponse} returns this
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.setSignature = function (
	value,
) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional QuerySessionInfo session_info = 2;
 * @return {?proto.db3_node_proto.QuerySessionInfo}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.getSessionInfo =
	function () {
		return /** @type{?proto.db3_node_proto.QuerySessionInfo} */ (
			jspb.Message.getWrapperField(
				this,
				proto.db3_node_proto.QuerySessionInfo,
				2,
			)
		);
	};

/**
 * @param {?proto.db3_node_proto.QuerySessionInfo|undefined} value
 * @return {!proto.db3_node_proto.GetSessionInfoResponse} returns this
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.setSessionInfo =
	function (value) {
		return jspb.Message.setWrapperField(this, 2, value);
	};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetSessionInfoResponse} returns this
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.clearSessionInfo =
	function () {
		return this.setSessionInfo(undefined);
	};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.hasSessionInfo =
	function () {
		return jspb.Message.getField(this, 2) != null;
	};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BroadcastRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BroadcastRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BroadcastRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BroadcastRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				body: msg.getBody_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BroadcastRequest}
 */
proto.db3_node_proto.BroadcastRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BroadcastRequest();
	return proto.db3_node_proto.BroadcastRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BroadcastRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BroadcastRequest}
 */
proto.db3_node_proto.BroadcastRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setBody(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BroadcastRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BroadcastRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BroadcastRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getBody_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
};

/**
 * optional bytes body = 1;
 * @return {string}
 */
proto.db3_node_proto.BroadcastRequest.prototype.getBody = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, "")
	);
};

/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.db3_node_proto.BroadcastRequest.prototype.getBody_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBody()));
};

/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastRequest.prototype.getBody_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBody()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BroadcastRequest} returns this
 */
proto.db3_node_proto.BroadcastRequest.prototype.setBody = function (value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BroadcastResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BroadcastResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BroadcastResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BroadcastResponse.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				hash: msg.getHash_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BroadcastResponse}
 */
proto.db3_node_proto.BroadcastResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BroadcastResponse();
	return proto.db3_node_proto.BroadcastResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BroadcastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BroadcastResponse}
 */
proto.db3_node_proto.BroadcastResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setHash(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BroadcastResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BroadcastResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BroadcastResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getHash_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
};

/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.db3_node_proto.BroadcastResponse.prototype.getHash = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 2, "")
	);
};

/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.db3_node_proto.BroadcastResponse.prototype.getHash_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastResponse.prototype.getHash_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BroadcastResponse} returns this
 */
proto.db3_node_proto.BroadcastResponse.prototype.setHash = function (value) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * @enum {number}
 */
proto.db3_node_proto.SessionStatus = {
	RUNNING: 0,
	BLOCKED: 1,
};

export default proto.db3_node_proto;
// goog.object.extend(exports, proto.db3_node_proto);
