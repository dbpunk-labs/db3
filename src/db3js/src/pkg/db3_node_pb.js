// source: db3_node.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import * as jspb from "google-protobuf";
import db3_bill_pb from "./db3_bill_pb.js";
import db3_mutation_pb from "./db3_mutation_pb.js";
import db3_account_pb from "./db3_account_pb.js";
import db3_session_pb from "./db3_session_pb.js";
import db3_namespace_pb from "./db3_namespace_pb.js";

var goog = jspb;
var global = function() {
	return this || window || global || self || Function("return this")();
}.call(null);

goog.object.extend(proto, db3_bill_pb);
goog.object.extend(proto, db3_mutation_pb);
goog.object.extend(proto, db3_account_pb);
goog.object.extend(proto, db3_session_pb);
goog.object.extend(proto, db3_namespace_pb);

globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.BatchGetKey",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.BatchGetValue",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.BroadcastRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.BroadcastResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.CloseSessionRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.CloseSessionResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetAccountRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetKeyRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetKeyResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetNamespaceRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetNamespaceResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetRangeRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetRangeResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetSessionInfoRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.GetSessionInfoResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.OpenSessionRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.OpenSessionResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.QueryBillKey",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.QueryBillRequest",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.QueryBillResponse",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.Range",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.RangeKey",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.RangeValue",
	null,
	global,
);
globalThis.__hack = goog.exportSymbol(
	"proto.db3_node_proto.SessionIdentifier",
	null,
	global,
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.QueryBillKey = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.QueryBillKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.QueryBillKey.displayName =
		"proto.db3_node_proto.QueryBillKey";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.QueryBillRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.QueryBillRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.QueryBillRequest.displayName =
		"proto.db3_node_proto.QueryBillRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.QueryBillResponse = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.QueryBillResponse.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.QueryBillResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.QueryBillResponse.displayName =
		"proto.db3_node_proto.QueryBillResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.Range = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.Range.displayName = "proto.db3_node_proto.Range";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.RangeKey = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.RangeKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.RangeKey.displayName = "proto.db3_node_proto.RangeKey";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BatchGetKey = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.BatchGetKey.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.BatchGetKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BatchGetKey.displayName =
		"proto.db3_node_proto.BatchGetKey";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.RangeValue = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.RangeValue.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.RangeValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.RangeValue.displayName =
		"proto.db3_node_proto.RangeValue";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BatchGetValue = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.BatchGetValue.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.BatchGetValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BatchGetValue.displayName =
		"proto.db3_node_proto.BatchGetValue";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.SessionIdentifier = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.SessionIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.SessionIdentifier.displayName =
		"proto.db3_node_proto.SessionIdentifier";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetKeyRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetKeyRequest.displayName =
		"proto.db3_node_proto.GetKeyRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetKeyResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetKeyResponse.displayName =
		"proto.db3_node_proto.GetKeyResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetRangeRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetRangeRequest.displayName =
		"proto.db3_node_proto.GetRangeRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetRangeResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetRangeResponse.displayName =
		"proto.db3_node_proto.GetRangeResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetAccountRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetAccountRequest.displayName =
		"proto.db3_node_proto.GetAccountRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetSessionInfoRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetSessionInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetSessionInfoRequest.displayName =
		"proto.db3_node_proto.GetSessionInfoRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.OpenSessionRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.OpenSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.OpenSessionRequest.displayName =
		"proto.db3_node_proto.OpenSessionRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.OpenSessionResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.OpenSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.OpenSessionResponse.displayName =
		"proto.db3_node_proto.OpenSessionResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.CloseSessionRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.CloseSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.CloseSessionRequest.displayName =
		"proto.db3_node_proto.CloseSessionRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.CloseSessionResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.CloseSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.CloseSessionResponse.displayName =
		"proto.db3_node_proto.CloseSessionResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetSessionInfoResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetSessionInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetSessionInfoResponse.displayName =
		"proto.db3_node_proto.GetSessionInfoResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BroadcastRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.BroadcastRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BroadcastRequest.displayName =
		"proto.db3_node_proto.BroadcastRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.BroadcastResponse = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.BroadcastResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.BroadcastResponse.displayName =
		"proto.db3_node_proto.BroadcastResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetNamespaceRequest = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.db3_node_proto.GetNamespaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetNamespaceRequest.displayName =
		"proto.db3_node_proto.GetNamespaceRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.db3_node_proto.GetNamespaceResponse = function(opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		proto.db3_node_proto.GetNamespaceResponse.repeatedFields_,
		null,
	);
};
goog.inherits(proto.db3_node_proto.GetNamespaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.db3_node_proto.GetNamespaceResponse.displayName =
		"proto.db3_node_proto.GetNamespaceResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.QueryBillKey.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.QueryBillKey.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.QueryBillKey} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.QueryBillKey.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				height: jspb.Message.getFieldWithDefault(msg, 1, 0),
				startId: jspb.Message.getFieldWithDefault(msg, 2, 0),
				endId: jspb.Message.getFieldWithDefault(msg, 3, 0),
				sessionToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.QueryBillKey}
 */
proto.db3_node_proto.QueryBillKey.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.QueryBillKey();
	return proto.db3_node_proto.QueryBillKey.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.QueryBillKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.QueryBillKey}
 */
proto.db3_node_proto.QueryBillKey.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setHeight(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setStartId(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setEndId(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.QueryBillKey.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.QueryBillKey.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.QueryBillKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.QueryBillKey.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getHeight();
	if (f !== 0) {
		writer.writeUint64(1, f);
	}
	f = message.getStartId();
	if (f !== 0) {
		writer.writeUint64(2, f);
	}
	f = message.getEndId();
	if (f !== 0) {
		writer.writeUint64(3, f);
	}
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
};

/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.db3_node_proto.QueryBillKey.prototype.getHeight = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QueryBillKey} returns this
 */
proto.db3_node_proto.QueryBillKey.prototype.setHeight = function(value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint64 start_id = 2;
 * @return {number}
 */
proto.db3_node_proto.QueryBillKey.prototype.getStartId = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QueryBillKey} returns this
 */
proto.db3_node_proto.QueryBillKey.prototype.setStartId = function(value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional uint64 end_id = 3;
 * @return {number}
 */
proto.db3_node_proto.QueryBillKey.prototype.getEndId = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.QueryBillKey} returns this
 */
proto.db3_node_proto.QueryBillKey.prototype.setEndId = function(value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string session_token = 4;
 * @return {string}
 */
proto.db3_node_proto.QueryBillKey.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		4,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.QueryBillKey} returns this
 */
proto.db3_node_proto.QueryBillKey.prototype.setSessionToken = function(value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.QueryBillRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.QueryBillRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.QueryBillRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.QueryBillRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				queryBillKey:
					(f = msg.getQueryBillKey()) &&
					proto.db3_node_proto.QueryBillKey.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.QueryBillRequest}
 */
proto.db3_node_proto.QueryBillRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.QueryBillRequest();
	return proto.db3_node_proto.QueryBillRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.QueryBillRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.QueryBillRequest}
 */
proto.db3_node_proto.QueryBillRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.db3_node_proto.QueryBillKey();
				reader.readMessage(
					value,
					proto.db3_node_proto.QueryBillKey
						.deserializeBinaryFromReader,
				);
				msg.setQueryBillKey(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.QueryBillRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.QueryBillRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.QueryBillRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.QueryBillRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getQueryBillKey();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.db3_node_proto.QueryBillKey.serializeBinaryToWriter,
		);
	}
};

/**
 * optional QueryBillKey query_bill_key = 1;
 * @return {?proto.db3_node_proto.QueryBillKey}
 */
proto.db3_node_proto.QueryBillRequest.prototype.getQueryBillKey = function() {
	return /** @type{?proto.db3_node_proto.QueryBillKey} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_node_proto.QueryBillKey,
		1,
	));
};

/**
 * @param {?proto.db3_node_proto.QueryBillKey|undefined} value
 * @return {!proto.db3_node_proto.QueryBillRequest} returns this
 */
proto.db3_node_proto.QueryBillRequest.prototype.setQueryBillKey = function(
	value,
) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.QueryBillRequest} returns this
 */
proto.db3_node_proto.QueryBillRequest.prototype.clearQueryBillKey = function() {
	return this.setQueryBillKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.QueryBillRequest.prototype.hasQueryBillKey = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.QueryBillResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.QueryBillResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.QueryBillResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.QueryBillResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.QueryBillResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				billsList: jspb.Message.toObjectList(
					msg.getBillsList(),
					db3_bill_pb.Bill.toObject,
					includeInstance,
				),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.QueryBillResponse}
 */
proto.db3_node_proto.QueryBillResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.QueryBillResponse();
	return proto.db3_node_proto.QueryBillResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.QueryBillResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.QueryBillResponse}
 */
proto.db3_node_proto.QueryBillResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_bill_pb.Bill();
				reader.readMessage(
					value,
					db3_bill_pb.Bill.deserializeBinaryFromReader,
				);
				msg.addBills(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.QueryBillResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.QueryBillResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.QueryBillResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.QueryBillResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getBillsList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			db3_bill_pb.Bill.serializeBinaryToWriter,
		);
	}
};

/**
 * repeated db3_bill_proto.Bill bills = 1;
 * @return {!Array<!proto.db3_bill_proto.Bill>}
 */
proto.db3_node_proto.QueryBillResponse.prototype.getBillsList = function() {
	return /** @type{!Array<!proto.db3_bill_proto.Bill>} */ (jspb.Message.getRepeatedWrapperField(
		this,
		db3_bill_pb.Bill,
		1,
	));
};

/**
 * @param {!Array<!proto.db3_bill_proto.Bill>} value
 * @return {!proto.db3_node_proto.QueryBillResponse} returns this
 */
proto.db3_node_proto.QueryBillResponse.prototype.setBillsList = function(
	value,
) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.db3_bill_proto.Bill=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db3_bill_proto.Bill}
 */
proto.db3_node_proto.QueryBillResponse.prototype.addBills = function(
	opt_value,
	opt_index,
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.db3_bill_proto.Bill,
		opt_index,
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.QueryBillResponse} returns this
 */
proto.db3_node_proto.QueryBillResponse.prototype.clearBillsList = function() {
	return this.setBillsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.Range.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.Range.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.Range} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.Range.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				start: msg.getStart_asB64(),
				end: msg.getEnd_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.Range}
 */
proto.db3_node_proto.Range.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.Range();
	return proto.db3_node_proto.Range.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.Range}
 */
proto.db3_node_proto.Range.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setStart(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setEnd(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.Range.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.Range.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.Range.serializeBinaryToWriter = function(message, writer) {
	var f = undefined;
	f = message.getStart_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getEnd_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
};

/**
 * optional bytes start = 1;
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getStart = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * optional bytes start = 1;
 * This is a type-conversion wrapper around `getStart()`
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getStart_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getStart()));
};

/**
 * optional bytes start = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStart()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.Range.prototype.getStart_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getStart()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.Range} returns this
 */
proto.db3_node_proto.Range.prototype.setStart = function(value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes end = 2;
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getEnd = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * optional bytes end = 2;
 * This is a type-conversion wrapper around `getEnd()`
 * @return {string}
 */
proto.db3_node_proto.Range.prototype.getEnd_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getEnd()));
};

/**
 * optional bytes end = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEnd()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.Range.prototype.getEnd_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getEnd()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.Range} returns this
 */
proto.db3_node_proto.Range.prototype.setEnd = function(value) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.RangeKey.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.RangeKey.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.RangeKey} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.RangeKey.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				ns: msg.getNs_asB64(),
				range:
					(f = msg.getRange()) &&
					proto.db3_node_proto.Range.toObject(includeInstance, f),
				sessionToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.RangeKey}
 */
proto.db3_node_proto.RangeKey.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.RangeKey();
	return proto.db3_node_proto.RangeKey.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.RangeKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.RangeKey}
 */
proto.db3_node_proto.RangeKey.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setNs(value);
				break;
			case 2:
				var value = new proto.db3_node_proto.Range();
				reader.readMessage(
					value,
					proto.db3_node_proto.Range.deserializeBinaryFromReader,
				);
				msg.setRange(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RangeKey.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.RangeKey.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.RangeKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.RangeKey.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getNs_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getRange();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.db3_node_proto.Range.serializeBinaryToWriter,
		);
	}
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
};

/**
 * optional bytes ns = 1;
 * @return {string}
 */
proto.db3_node_proto.RangeKey.prototype.getNs = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * optional bytes ns = 1;
 * This is a type-conversion wrapper around `getNs()`
 * @return {string}
 */
proto.db3_node_proto.RangeKey.prototype.getNs_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNs()));
};

/**
 * optional bytes ns = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNs()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RangeKey.prototype.getNs_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.RangeKey} returns this
 */
proto.db3_node_proto.RangeKey.prototype.setNs = function(value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional Range range = 2;
 * @return {?proto.db3_node_proto.Range}
 */
proto.db3_node_proto.RangeKey.prototype.getRange = function() {
	return /** @type{?proto.db3_node_proto.Range} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_node_proto.Range,
		2,
	));
};

/**
 * @param {?proto.db3_node_proto.Range|undefined} value
 * @return {!proto.db3_node_proto.RangeKey} returns this
 */
proto.db3_node_proto.RangeKey.prototype.setRange = function(value) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.RangeKey} returns this
 */
proto.db3_node_proto.RangeKey.prototype.clearRange = function() {
	return this.setRange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.RangeKey.prototype.hasRange = function() {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string session_token = 3;
 * @return {string}
 */
proto.db3_node_proto.RangeKey.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.RangeKey} returns this
 */
proto.db3_node_proto.RangeKey.prototype.setSessionToken = function(value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.BatchGetKey.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BatchGetKey.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BatchGetKey.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BatchGetKey} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BatchGetKey.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				ns: msg.getNs_asB64(),
				keysList: msg.getKeysList_asB64(),
				sessionToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BatchGetKey}
 */
proto.db3_node_proto.BatchGetKey.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BatchGetKey();
	return proto.db3_node_proto.BatchGetKey.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BatchGetKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BatchGetKey}
 */
proto.db3_node_proto.BatchGetKey.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setNs(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.addKeys(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetKey.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BatchGetKey.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BatchGetKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BatchGetKey.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getNs_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getKeysList_asU8();
	if (f.length > 0) {
		writer.writeRepeatedBytes(2, f);
	}
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
};

/**
 * optional bytes ns = 1;
 * @return {string}
 */
proto.db3_node_proto.BatchGetKey.prototype.getNs = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * optional bytes ns = 1;
 * This is a type-conversion wrapper around `getNs()`
 * @return {string}
 */
proto.db3_node_proto.BatchGetKey.prototype.getNs_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNs()));
};

/**
 * optional bytes ns = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNs()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetKey.prototype.getNs_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.setNs = function(value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * repeated bytes keys = 2;
 * @return {!Array<string>}
 */
proto.db3_node_proto.BatchGetKey.prototype.getKeysList = function() {
	return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(
		this,
		2,
	));
};

/**
 * repeated bytes keys = 2;
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<string>}
 */
proto.db3_node_proto.BatchGetKey.prototype.getKeysList_asB64 = function() {
	return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
		this.getKeysList(),
	));
};

/**
 * repeated bytes keys = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.db3_node_proto.BatchGetKey.prototype.getKeysList_asU8 = function() {
	return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
		this.getKeysList(),
	));
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.setKeysList = function(value) {
	return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.addKeys = function(
	value,
	opt_index,
) {
	return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.clearKeysList = function() {
	return this.setKeysList([]);
};

/**
 * optional string session_token = 3;
 * @return {string}
 */
proto.db3_node_proto.BatchGetKey.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.BatchGetKey} returns this
 */
proto.db3_node_proto.BatchGetKey.prototype.setSessionToken = function(value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.RangeValue.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.RangeValue.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.RangeValue.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.RangeValue} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.RangeValue.toObject = function(includeInstance, msg) {
		var f,
			obj = {
				valuesList: jspb.Message.toObjectList(
					msg.getValuesList(),
					db3_mutation_pb.KVPair.toObject,
					includeInstance,
				),
				sessionToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
				ns: msg.getNs_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.RangeValue}
 */
proto.db3_node_proto.RangeValue.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.RangeValue();
	return proto.db3_node_proto.RangeValue.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.RangeValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.RangeValue}
 */
proto.db3_node_proto.RangeValue.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_mutation_pb.KVPair();
				reader.readMessage(
					value,
					db3_mutation_pb.KVPair.deserializeBinaryFromReader,
				);
				msg.addValues(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			case 3:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setNs(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RangeValue.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.RangeValue.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.RangeValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.RangeValue.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getValuesList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			db3_mutation_pb.KVPair.serializeBinaryToWriter,
		);
	}
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getNs_asU8();
	if (f.length > 0) {
		writer.writeBytes(3, f);
	}
};

/**
 * repeated db3_mutation_proto.KVPair values = 1;
 * @return {!Array<!proto.db3_mutation_proto.KVPair>}
 */
proto.db3_node_proto.RangeValue.prototype.getValuesList = function() {
	return /** @type{!Array<!proto.db3_mutation_proto.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
		this,
		db3_mutation_pb.KVPair,
		1,
	));
};

/**
 * @param {!Array<!proto.db3_mutation_proto.KVPair>} value
 * @return {!proto.db3_node_proto.RangeValue} returns this
 */
proto.db3_node_proto.RangeValue.prototype.setValuesList = function(value) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.db3_mutation_proto.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db3_mutation_proto.KVPair}
 */
proto.db3_node_proto.RangeValue.prototype.addValues = function(
	opt_value,
	opt_index,
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.db3_mutation_proto.KVPair,
		opt_index,
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.RangeValue} returns this
 */
proto.db3_node_proto.RangeValue.prototype.clearValuesList = function() {
	return this.setValuesList([]);
};

/**
 * optional string session_token = 2;
 * @return {string}
 */
proto.db3_node_proto.RangeValue.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.RangeValue} returns this
 */
proto.db3_node_proto.RangeValue.prototype.setSessionToken = function(value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bytes ns = 3;
 * @return {string}
 */
proto.db3_node_proto.RangeValue.prototype.getNs = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		"",
	));
};

/**
 * optional bytes ns = 3;
 * This is a type-conversion wrapper around `getNs()`
 * @return {string}
 */
proto.db3_node_proto.RangeValue.prototype.getNs_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNs()));
};

/**
 * optional bytes ns = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNs()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.RangeValue.prototype.getNs_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.RangeValue} returns this
 */
proto.db3_node_proto.RangeValue.prototype.setNs = function(value) {
	return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.BatchGetValue.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BatchGetValue.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BatchGetValue.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BatchGetValue} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BatchGetValue.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				valuesList: jspb.Message.toObjectList(
					msg.getValuesList(),
					db3_mutation_pb.KVPair.toObject,
					includeInstance,
				),
				sessionToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
				ns: msg.getNs_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BatchGetValue}
 */
proto.db3_node_proto.BatchGetValue.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BatchGetValue();
	return proto.db3_node_proto.BatchGetValue.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BatchGetValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BatchGetValue}
 */
proto.db3_node_proto.BatchGetValue.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_mutation_pb.KVPair();
				reader.readMessage(
					value,
					db3_mutation_pb.KVPair.deserializeBinaryFromReader,
				);
				msg.addValues(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			case 3:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setNs(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetValue.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BatchGetValue.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BatchGetValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BatchGetValue.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getValuesList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			db3_mutation_pb.KVPair.serializeBinaryToWriter,
		);
	}
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getNs_asU8();
	if (f.length > 0) {
		writer.writeBytes(3, f);
	}
};

/**
 * repeated db3_mutation_proto.KVPair values = 1;
 * @return {!Array<!proto.db3_mutation_proto.KVPair>}
 */
proto.db3_node_proto.BatchGetValue.prototype.getValuesList = function() {
	return /** @type{!Array<!proto.db3_mutation_proto.KVPair>} */ (jspb.Message.getRepeatedWrapperField(
		this,
		db3_mutation_pb.KVPair,
		1,
	));
};

/**
 * @param {!Array<!proto.db3_mutation_proto.KVPair>} value
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.setValuesList = function(value) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.db3_mutation_proto.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db3_mutation_proto.KVPair}
 */
proto.db3_node_proto.BatchGetValue.prototype.addValues = function(
	opt_value,
	opt_index,
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.db3_mutation_proto.KVPair,
		opt_index,
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.clearValuesList = function() {
	return this.setValuesList([]);
};

/**
 * optional string session_token = 2;
 * @return {string}
 */
proto.db3_node_proto.BatchGetValue.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.setSessionToken = function(value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bytes ns = 3;
 * @return {string}
 */
proto.db3_node_proto.BatchGetValue.prototype.getNs = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		"",
	));
};

/**
 * optional bytes ns = 3;
 * This is a type-conversion wrapper around `getNs()`
 * @return {string}
 */
proto.db3_node_proto.BatchGetValue.prototype.getNs_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getNs()));
};

/**
 * optional bytes ns = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNs()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BatchGetValue.prototype.getNs_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getNs()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BatchGetValue} returns this
 */
proto.db3_node_proto.BatchGetValue.prototype.setNs = function(value) {
	return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.SessionIdentifier.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.SessionIdentifier.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.SessionIdentifier} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.SessionIdentifier.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				sessionToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.SessionIdentifier}
 */
proto.db3_node_proto.SessionIdentifier.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.SessionIdentifier();
	return proto.db3_node_proto.SessionIdentifier.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.SessionIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.SessionIdentifier}
 */
proto.db3_node_proto.SessionIdentifier.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.SessionIdentifier.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.SessionIdentifier.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.SessionIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.SessionIdentifier.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string session_token = 1;
 * @return {string}
 */
proto.db3_node_proto.SessionIdentifier.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.SessionIdentifier} returns this
 */
proto.db3_node_proto.SessionIdentifier.prototype.setSessionToken = function(
	value,
) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetKeyRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetKeyRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetKeyRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetKeyRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				batchGet:
					(f = msg.getBatchGet()) &&
					proto.db3_node_proto.BatchGetKey.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetKeyRequest}
 */
proto.db3_node_proto.GetKeyRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetKeyRequest();
	return proto.db3_node_proto.GetKeyRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetKeyRequest}
 */
proto.db3_node_proto.GetKeyRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.db3_node_proto.BatchGetKey();
				reader.readMessage(
					value,
					proto.db3_node_proto.BatchGetKey
						.deserializeBinaryFromReader,
				);
				msg.setBatchGet(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetKeyRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetKeyRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetKeyRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getBatchGet();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.db3_node_proto.BatchGetKey.serializeBinaryToWriter,
		);
	}
};

/**
 * optional BatchGetKey batch_get = 1;
 * @return {?proto.db3_node_proto.BatchGetKey}
 */
proto.db3_node_proto.GetKeyRequest.prototype.getBatchGet = function() {
	return /** @type{?proto.db3_node_proto.BatchGetKey} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_node_proto.BatchGetKey,
		1,
	));
};

/**
 * @param {?proto.db3_node_proto.BatchGetKey|undefined} value
 * @return {!proto.db3_node_proto.GetKeyRequest} returns this
 */
proto.db3_node_proto.GetKeyRequest.prototype.setBatchGet = function(value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetKeyRequest} returns this
 */
proto.db3_node_proto.GetKeyRequest.prototype.clearBatchGet = function() {
	return this.setBatchGet(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetKeyRequest.prototype.hasBatchGet = function() {
	return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetKeyResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetKeyResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetKeyResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetKeyResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				batchGetValues:
					(f = msg.getBatchGetValues()) &&
					proto.db3_node_proto.BatchGetValue.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetKeyResponse}
 */
proto.db3_node_proto.GetKeyResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetKeyResponse();
	return proto.db3_node_proto.GetKeyResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetKeyResponse}
 */
proto.db3_node_proto.GetKeyResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 2:
				var value = new proto.db3_node_proto.BatchGetValue();
				reader.readMessage(
					value,
					proto.db3_node_proto.BatchGetValue
						.deserializeBinaryFromReader,
				);
				msg.setBatchGetValues(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetKeyResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetKeyResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetKeyResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getBatchGetValues();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.db3_node_proto.BatchGetValue.serializeBinaryToWriter,
		);
	}
};

/**
 * optional BatchGetValue batch_get_values = 2;
 * @return {?proto.db3_node_proto.BatchGetValue}
 */
proto.db3_node_proto.GetKeyResponse.prototype.getBatchGetValues = function() {
	return /** @type{?proto.db3_node_proto.BatchGetValue} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_node_proto.BatchGetValue,
		2,
	));
};

/**
 * @param {?proto.db3_node_proto.BatchGetValue|undefined} value
 * @return {!proto.db3_node_proto.GetKeyResponse} returns this
 */
proto.db3_node_proto.GetKeyResponse.prototype.setBatchGetValues = function(
	value,
) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetKeyResponse} returns this
 */
proto.db3_node_proto.GetKeyResponse.prototype.clearBatchGetValues = function() {
	return this.setBatchGetValues(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetKeyResponse.prototype.hasBatchGetValues = function() {
	return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetRangeRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetRangeRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetRangeRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetRangeRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				rangeKeys:
					(f = msg.getRangeKeys()) &&
					proto.db3_node_proto.RangeKey.toObject(includeInstance, f),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetRangeRequest}
 */
proto.db3_node_proto.GetRangeRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetRangeRequest();
	return proto.db3_node_proto.GetRangeRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetRangeRequest}
 */
proto.db3_node_proto.GetRangeRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.db3_node_proto.RangeKey();
				reader.readMessage(
					value,
					proto.db3_node_proto.RangeKey.deserializeBinaryFromReader,
				);
				msg.setRangeKeys(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetRangeRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetRangeRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetRangeRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getRangeKeys();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.db3_node_proto.RangeKey.serializeBinaryToWriter,
		);
	}
};

/**
 * optional RangeKey range_keys = 1;
 * @return {?proto.db3_node_proto.RangeKey}
 */
proto.db3_node_proto.GetRangeRequest.prototype.getRangeKeys = function() {
	return /** @type{?proto.db3_node_proto.RangeKey} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_node_proto.RangeKey,
		1,
	));
};

/**
 * @param {?proto.db3_node_proto.RangeKey|undefined} value
 * @return {!proto.db3_node_proto.GetRangeRequest} returns this
 */
proto.db3_node_proto.GetRangeRequest.prototype.setRangeKeys = function(value) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetRangeRequest} returns this
 */
proto.db3_node_proto.GetRangeRequest.prototype.clearRangeKeys = function() {
	return this.setRangeKeys(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetRangeRequest.prototype.hasRangeKeys = function() {
	return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetRangeResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetRangeResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetRangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetRangeResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				rangeValue:
					(f = msg.getRangeValue()) &&
					proto.db3_node_proto.RangeValue.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetRangeResponse}
 */
proto.db3_node_proto.GetRangeResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetRangeResponse();
	return proto.db3_node_proto.GetRangeResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetRangeResponse}
 */
proto.db3_node_proto.GetRangeResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.db3_node_proto.RangeValue();
				reader.readMessage(
					value,
					proto.db3_node_proto.RangeValue.deserializeBinaryFromReader,
				);
				msg.setRangeValue(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetRangeResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetRangeResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetRangeResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getRangeValue();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.db3_node_proto.RangeValue.serializeBinaryToWriter,
		);
	}
};

/**
 * optional RangeValue range_value = 1;
 * @return {?proto.db3_node_proto.RangeValue}
 */
proto.db3_node_proto.GetRangeResponse.prototype.getRangeValue = function() {
	return /** @type{?proto.db3_node_proto.RangeValue} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_node_proto.RangeValue,
		1,
	));
};

/**
 * @param {?proto.db3_node_proto.RangeValue|undefined} value
 * @return {!proto.db3_node_proto.GetRangeResponse} returns this
 */
proto.db3_node_proto.GetRangeResponse.prototype.setRangeValue = function(
	value,
) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetRangeResponse} returns this
 */
proto.db3_node_proto.GetRangeResponse.prototype.clearRangeValue = function() {
	return this.setRangeValue(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetRangeResponse.prototype.hasRangeValue = function() {
	return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetAccountRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetAccountRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetAccountRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetAccountRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetAccountRequest}
 */
proto.db3_node_proto.GetAccountRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetAccountRequest();
	return proto.db3_node_proto.GetAccountRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetAccountRequest}
 */
proto.db3_node_proto.GetAccountRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setAddr(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetAccountRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetAccountRequest.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetAccountRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getAddr();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string addr = 1;
 * @return {string}
 */
proto.db3_node_proto.GetAccountRequest.prototype.getAddr = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.GetAccountRequest} returns this
 */
proto.db3_node_proto.GetAccountRequest.prototype.setAddr = function(value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetSessionInfoRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetSessionInfoRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetSessionInfoRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetSessionInfoRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				sessionIdentifier:
					(f = msg.getSessionIdentifier()) &&
					proto.db3_node_proto.SessionIdentifier.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetSessionInfoRequest}
 */
proto.db3_node_proto.GetSessionInfoRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetSessionInfoRequest();
	return proto.db3_node_proto.GetSessionInfoRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetSessionInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetSessionInfoRequest}
 */
proto.db3_node_proto.GetSessionInfoRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.db3_node_proto.SessionIdentifier();
				reader.readMessage(
					value,
					proto.db3_node_proto.SessionIdentifier
						.deserializeBinaryFromReader,
				);
				msg.setSessionIdentifier(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetSessionInfoRequest.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetSessionInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetSessionInfoRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getSessionIdentifier();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.db3_node_proto.SessionIdentifier.serializeBinaryToWriter,
		);
	}
};

/**
 * optional SessionIdentifier session_identifier = 1;
 * @return {?proto.db3_node_proto.SessionIdentifier}
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.getSessionIdentifier = function() {
	return /** @type{?proto.db3_node_proto.SessionIdentifier} */ (jspb.Message.getWrapperField(
		this,
		proto.db3_node_proto.SessionIdentifier,
		1,
	));
};

/**
 * @param {?proto.db3_node_proto.SessionIdentifier|undefined} value
 * @return {!proto.db3_node_proto.GetSessionInfoRequest} returns this
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.setSessionIdentifier = function(
	value,
) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetSessionInfoRequest} returns this
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.clearSessionIdentifier = function() {
	return this.setSessionIdentifier(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetSessionInfoRequest.prototype.hasSessionIdentifier = function() {
	return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.OpenSessionRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.OpenSessionRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.OpenSessionRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.OpenSessionRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				header: msg.getHeader_asB64(),
				signature: msg.getSignature_asB64(),
				publicKey: msg.getPublicKey_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.OpenSessionRequest}
 */
proto.db3_node_proto.OpenSessionRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.OpenSessionRequest();
	return proto.db3_node_proto.OpenSessionRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.OpenSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.OpenSessionRequest}
 */
proto.db3_node_proto.OpenSessionRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setHeader(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setSignature(value);
				break;
			case 3:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setPublicKey(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.OpenSessionRequest.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.OpenSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.OpenSessionRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getHeader_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getSignature_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
	f = message.getPublicKey_asU8();
	if (f.length > 0) {
		writer.writeBytes(3, f);
	}
};

/**
 * optional bytes header = 1;
 * @return {string}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getHeader = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * optional bytes header = 1;
 * This is a type-conversion wrapper around `getHeader()`
 * @return {string}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getHeader_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHeader()));
};

/**
 * optional bytes header = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeader()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getHeader_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getHeader(),
	));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.OpenSessionRequest} returns this
 */
proto.db3_node_proto.OpenSessionRequest.prototype.setHeader = function(value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getSignature = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getSignature_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getSignature_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getSignature(),
	));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.OpenSessionRequest} returns this
 */
proto.db3_node_proto.OpenSessionRequest.prototype.setSignature = function(
	value,
) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes public_key = 3;
 * @return {string}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getPublicKey = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		"",
	));
};

/**
 * optional bytes public_key = 3;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getPublicKey_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicKey()));
};

/**
 * optional bytes public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.OpenSessionRequest.prototype.getPublicKey_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getPublicKey(),
	));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.OpenSessionRequest} returns this
 */
proto.db3_node_proto.OpenSessionRequest.prototype.setPublicKey = function(
	value,
) {
	return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.OpenSessionResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.OpenSessionResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.OpenSessionResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.OpenSessionResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				querySessionInfo:
					(f = msg.getQuerySessionInfo()) &&
					db3_session_pb.QuerySessionInfo.toObject(
						includeInstance,
						f,
					),
				sessionTimeoutSecond: jspb.Message.getFieldWithDefault(
					msg,
					2,
					0,
				),
				maxQueryLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
				sessionToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.OpenSessionResponse}
 */
proto.db3_node_proto.OpenSessionResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.OpenSessionResponse();
	return proto.db3_node_proto.OpenSessionResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.OpenSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.OpenSessionResponse}
 */
proto.db3_node_proto.OpenSessionResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_session_pb.QuerySessionInfo();
				reader.readMessage(
					value,
					db3_session_pb.QuerySessionInfo.deserializeBinaryFromReader,
				);
				msg.setQuerySessionInfo(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setSessionTimeoutSecond(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setMaxQueryLimit(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.OpenSessionResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.OpenSessionResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.OpenSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.OpenSessionResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getQuerySessionInfo();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			db3_session_pb.QuerySessionInfo.serializeBinaryToWriter,
		);
	}
	f = message.getSessionTimeoutSecond();
	if (f !== 0) {
		writer.writeInt64(2, f);
	}
	f = message.getMaxQueryLimit();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
};

/**
 * optional db3_session_proto.QuerySessionInfo query_session_info = 1;
 * @return {?proto.db3_session_proto.QuerySessionInfo}
 */
proto.db3_node_proto.OpenSessionResponse.prototype.getQuerySessionInfo = function() {
	return /** @type{?proto.db3_session_proto.QuerySessionInfo} */ (jspb.Message.getWrapperField(
		this,
		db3_session_pb.QuerySessionInfo,
		1,
	));
};

/**
 * @param {?proto.db3_session_proto.QuerySessionInfo|undefined} value
 * @return {!proto.db3_node_proto.OpenSessionResponse} returns this
 */
proto.db3_node_proto.OpenSessionResponse.prototype.setQuerySessionInfo = function(
	value,
) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.OpenSessionResponse} returns this
 */
proto.db3_node_proto.OpenSessionResponse.prototype.clearQuerySessionInfo = function() {
	return this.setQuerySessionInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.OpenSessionResponse.prototype.hasQuerySessionInfo = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int64 session_timeout_second = 2;
 * @return {number}
 */
proto.db3_node_proto.OpenSessionResponse.prototype.getSessionTimeoutSecond = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.OpenSessionResponse} returns this
 */
proto.db3_node_proto.OpenSessionResponse.prototype.setSessionTimeoutSecond = function(
	value,
) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 max_query_limit = 3;
 * @return {number}
 */
proto.db3_node_proto.OpenSessionResponse.prototype.getMaxQueryLimit = function() {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.db3_node_proto.OpenSessionResponse} returns this
 */
proto.db3_node_proto.OpenSessionResponse.prototype.setMaxQueryLimit = function(
	value,
) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string session_token = 4;
 * @return {string}
 */
proto.db3_node_proto.OpenSessionResponse.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		4,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.OpenSessionResponse} returns this
 */
proto.db3_node_proto.OpenSessionResponse.prototype.setSessionToken = function(
	value,
) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.CloseSessionRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.CloseSessionRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.CloseSessionRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.CloseSessionRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				payload: msg.getPayload_asB64(),
				signature: msg.getSignature_asB64(),
				publicKey: msg.getPublicKey_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.CloseSessionRequest}
 */
proto.db3_node_proto.CloseSessionRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.CloseSessionRequest();
	return proto.db3_node_proto.CloseSessionRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.CloseSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.CloseSessionRequest}
 */
proto.db3_node_proto.CloseSessionRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setPayload(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setSignature(value);
				break;
			case 3:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setPublicKey(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.CloseSessionRequest.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.CloseSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.CloseSessionRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getPayload_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
	f = message.getSignature_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
	f = message.getPublicKey_asU8();
	if (f.length > 0) {
		writer.writeBytes(3, f);
	}
};

/**
 * optional bytes payload = 1;
 * @return {string}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getPayload = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getPayload_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};

/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getPayload_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getPayload(),
	));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.CloseSessionRequest} returns this
 */
proto.db3_node_proto.CloseSessionRequest.prototype.setPayload = function(
	value,
) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getSignature = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getSignature_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getSignature_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getSignature(),
	));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.CloseSessionRequest} returns this
 */
proto.db3_node_proto.CloseSessionRequest.prototype.setSignature = function(
	value,
) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes public_key = 3;
 * @return {string}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getPublicKey = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		3,
		"",
	));
};

/**
 * optional bytes public_key = 3;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getPublicKey_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPublicKey()));
};

/**
 * optional bytes public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.CloseSessionRequest.prototype.getPublicKey_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getPublicKey(),
	));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.CloseSessionRequest} returns this
 */
proto.db3_node_proto.CloseSessionRequest.prototype.setPublicKey = function(
	value,
) {
	return jspb.Message.setProto3BytesField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.CloseSessionResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.CloseSessionResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.CloseSessionResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.CloseSessionResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				querySessionInfo:
					(f = msg.getQuerySessionInfo()) &&
					db3_session_pb.QuerySessionInfo.toObject(
						includeInstance,
						f,
					),
				hash: msg.getHash_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.CloseSessionResponse}
 */
proto.db3_node_proto.CloseSessionResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.CloseSessionResponse();
	return proto.db3_node_proto.CloseSessionResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.CloseSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.CloseSessionResponse}
 */
proto.db3_node_proto.CloseSessionResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_session_pb.QuerySessionInfo();
				reader.readMessage(
					value,
					db3_session_pb.QuerySessionInfo.deserializeBinaryFromReader,
				);
				msg.setQuerySessionInfo(value);
				break;
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setHash(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.CloseSessionResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.CloseSessionResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.CloseSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.CloseSessionResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getQuerySessionInfo();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			db3_session_pb.QuerySessionInfo.serializeBinaryToWriter,
		);
	}
	f = message.getHash_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
};

/**
 * optional db3_session_proto.QuerySessionInfo query_session_info = 1;
 * @return {?proto.db3_session_proto.QuerySessionInfo}
 */
proto.db3_node_proto.CloseSessionResponse.prototype.getQuerySessionInfo = function() {
	return /** @type{?proto.db3_session_proto.QuerySessionInfo} */ (jspb.Message.getWrapperField(
		this,
		db3_session_pb.QuerySessionInfo,
		1,
	));
};

/**
 * @param {?proto.db3_session_proto.QuerySessionInfo|undefined} value
 * @return {!proto.db3_node_proto.CloseSessionResponse} returns this
 */
proto.db3_node_proto.CloseSessionResponse.prototype.setQuerySessionInfo = function(
	value,
) {
	return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.CloseSessionResponse} returns this
 */
proto.db3_node_proto.CloseSessionResponse.prototype.clearQuerySessionInfo = function() {
	return this.setQuerySessionInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.CloseSessionResponse.prototype.hasQuerySessionInfo = function() {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.db3_node_proto.CloseSessionResponse.prototype.getHash = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.db3_node_proto.CloseSessionResponse.prototype.getHash_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.CloseSessionResponse.prototype.getHash_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.CloseSessionResponse} returns this
 */
proto.db3_node_proto.CloseSessionResponse.prototype.setHash = function(value) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetSessionInfoResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetSessionInfoResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetSessionInfoResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetSessionInfoResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				sessionInfo:
					(f = msg.getSessionInfo()) &&
					db3_session_pb.QuerySessionInfo.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetSessionInfoResponse}
 */
proto.db3_node_proto.GetSessionInfoResponse.deserializeBinary = function(
	bytes,
) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetSessionInfoResponse();
	return proto.db3_node_proto.GetSessionInfoResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetSessionInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetSessionInfoResponse}
 */
proto.db3_node_proto.GetSessionInfoResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 2:
				var value = new db3_session_pb.QuerySessionInfo();
				reader.readMessage(
					value,
					db3_session_pb.QuerySessionInfo.deserializeBinaryFromReader,
				);
				msg.setSessionInfo(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetSessionInfoResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetSessionInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetSessionInfoResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getSessionInfo();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			db3_session_pb.QuerySessionInfo.serializeBinaryToWriter,
		);
	}
};

/**
 * optional db3_session_proto.QuerySessionInfo session_info = 2;
 * @return {?proto.db3_session_proto.QuerySessionInfo}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.getSessionInfo = function() {
	return /** @type{?proto.db3_session_proto.QuerySessionInfo} */ (jspb.Message.getWrapperField(
		this,
		db3_session_pb.QuerySessionInfo,
		2,
	));
};

/**
 * @param {?proto.db3_session_proto.QuerySessionInfo|undefined} value
 * @return {!proto.db3_node_proto.GetSessionInfoResponse} returns this
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.setSessionInfo = function(
	value,
) {
	return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.db3_node_proto.GetSessionInfoResponse} returns this
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.clearSessionInfo = function() {
	return this.setSessionInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.db3_node_proto.GetSessionInfoResponse.prototype.hasSessionInfo = function() {
	return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BroadcastRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BroadcastRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BroadcastRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BroadcastRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				body: msg.getBody_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BroadcastRequest}
 */
proto.db3_node_proto.BroadcastRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BroadcastRequest();
	return proto.db3_node_proto.BroadcastRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BroadcastRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BroadcastRequest}
 */
proto.db3_node_proto.BroadcastRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setBody(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BroadcastRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BroadcastRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BroadcastRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getBody_asU8();
	if (f.length > 0) {
		writer.writeBytes(1, f);
	}
};

/**
 * optional bytes body = 1;
 * @return {string}
 */
proto.db3_node_proto.BroadcastRequest.prototype.getBody = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.db3_node_proto.BroadcastRequest.prototype.getBody_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getBody()));
};

/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastRequest.prototype.getBody_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getBody()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BroadcastRequest} returns this
 */
proto.db3_node_proto.BroadcastRequest.prototype.setBody = function(value) {
	return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.BroadcastResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.BroadcastResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.BroadcastResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.BroadcastResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				hash: msg.getHash_asB64(),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.BroadcastResponse}
 */
proto.db3_node_proto.BroadcastResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.BroadcastResponse();
	return proto.db3_node_proto.BroadcastResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.BroadcastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.BroadcastResponse}
 */
proto.db3_node_proto.BroadcastResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 2:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setHash(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.BroadcastResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.BroadcastResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.BroadcastResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getHash_asU8();
	if (f.length > 0) {
		writer.writeBytes(2, f);
	}
};

/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.db3_node_proto.BroadcastResponse.prototype.getHash = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		2,
		"",
	));
};

/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.db3_node_proto.BroadcastResponse.prototype.getHash_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getHash()));
};

/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.db3_node_proto.BroadcastResponse.prototype.getHash_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getHash()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.db3_node_proto.BroadcastResponse} returns this
 */
proto.db3_node_proto.BroadcastResponse.prototype.setHash = function(value) {
	return jspb.Message.setProto3BytesField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetNamespaceRequest.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetNamespaceRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetNamespaceRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetNamespaceRequest.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				sessionToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetNamespaceRequest}
 */
proto.db3_node_proto.GetNamespaceRequest.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetNamespaceRequest();
	return proto.db3_node_proto.GetNamespaceRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetNamespaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetNamespaceRequest}
 */
proto.db3_node_proto.GetNamespaceRequest.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionToken(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetNamespaceRequest.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetNamespaceRequest.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetNamespaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetNamespaceRequest.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getSessionToken();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string session_token = 1;
 * @return {string}
 */
proto.db3_node_proto.GetNamespaceRequest.prototype.getSessionToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(
		this,
		1,
		"",
	));
};

/**
 * @param {string} value
 * @return {!proto.db3_node_proto.GetNamespaceRequest} returns this
 */
proto.db3_node_proto.GetNamespaceRequest.prototype.setSessionToken = function(
	value,
) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.db3_node_proto.GetNamespaceResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.db3_node_proto.GetNamespaceResponse.prototype.toObject = function(
		opt_includeInstance,
	) {
		return proto.db3_node_proto.GetNamespaceResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.db3_node_proto.GetNamespaceResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.db3_node_proto.GetNamespaceResponse.toObject = function(
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				nsListList: jspb.Message.toObjectList(
					msg.getNsListList(),
					db3_namespace_pb.Namespace.toObject,
					includeInstance,
				),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.db3_node_proto.GetNamespaceResponse}
 */
proto.db3_node_proto.GetNamespaceResponse.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.db3_node_proto.GetNamespaceResponse();
	return proto.db3_node_proto.GetNamespaceResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.db3_node_proto.GetNamespaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.db3_node_proto.GetNamespaceResponse}
 */
proto.db3_node_proto.GetNamespaceResponse.deserializeBinaryFromReader = function(
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new db3_namespace_pb.Namespace();
				reader.readMessage(
					value,
					db3_namespace_pb.Namespace.deserializeBinaryFromReader,
				);
				msg.addNsList(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.db3_node_proto.GetNamespaceResponse.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	proto.db3_node_proto.GetNamespaceResponse.serializeBinaryToWriter(
		this,
		writer,
	);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.db3_node_proto.GetNamespaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.db3_node_proto.GetNamespaceResponse.serializeBinaryToWriter = function(
	message,
	writer,
) {
	var f = undefined;
	f = message.getNsListList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			db3_namespace_pb.Namespace.serializeBinaryToWriter,
		);
	}
};

/**
 * repeated db3_namespace_proto.Namespace ns_list = 1;
 * @return {!Array<!proto.db3_namespace_proto.Namespace>}
 */
proto.db3_node_proto.GetNamespaceResponse.prototype.getNsListList = function() {
	return /** @type{!Array<!proto.db3_namespace_proto.Namespace>} */ (jspb.Message.getRepeatedWrapperField(
		this,
		db3_namespace_pb.Namespace,
		1,
	));
};

/**
 * @param {!Array<!proto.db3_namespace_proto.Namespace>} value
 * @return {!proto.db3_node_proto.GetNamespaceResponse} returns this
 */
proto.db3_node_proto.GetNamespaceResponse.prototype.setNsListList = function(
	value,
) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.db3_namespace_proto.Namespace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.db3_namespace_proto.Namespace}
 */
proto.db3_node_proto.GetNamespaceResponse.prototype.addNsList = function(
	opt_value,
	opt_index,
) {
	return jspb.Message.addToRepeatedWrapperField(
		this,
		1,
		opt_value,
		proto.db3_namespace_proto.Namespace,
		opt_index,
	);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.db3_node_proto.GetNamespaceResponse} returns this
 */
proto.db3_node_proto.GetNamespaceResponse.prototype.clearNsListList = function() {
	return this.setNsListList([]);
};

export default proto.db3_node_proto;
