//
//
// db3_base.proto
// Copyright (C) 2022 db3.network Author imotai <codego.me@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


syntax = "proto3";

package db3_base_proto;

enum DB3NodeType {
    KFrontendNode = 0;
    KMetaNode = 1;
    KMemoryNode = 2;
    KComputeNode = 3;
}

message DB3Node {
    string endpoint = 1;
    DB3NodeType node_type = 2;
    string ns = 3;
    int32 port = 4;
}

// the all types are supported by rtstore
enum DB3Type {
    KBool = 0;
    // int8
    KTinyInt = 1;
    // int16
    KSmallInt = 2;
    // int32
    KInt = 3;
    KBigInt = 4;
    KFloat = 5;
    KDouble = 6;
    KDate = 9;
    KDecimal = 10;
    //timestamp type
    KTimestampSecond = 11;
    KTimestampMillsSecond = 12;
    KTimestampMicroSecond = 13;
    // string type
    KStringUtf8 = 21;
}

enum CellType {
    KWritable = 0;
    kReadOnly = 1;
}

message StorageRegion {
    string region = 1;
    string endpoint = 2;
}

message StorageBackendConfig {
    string bucket = 1;
    StorageRegion region = 2;
    uint32 l1_rows_limit = 3;
    uint32 l2_rows_limit = 4;
}

// the smallest storage unit in rtstore
message CellStatus {
    // start timestamp
    int64 start_ts = 1;
    // end timestamp
    int64 end_ts = 2;
    // total row in cells
    int64 num_rows = 3;
    int32 cell_id = 4;
    int32 partition_id = 5;
    string display = 6;
    string cell_store_uri = 7;
    CellType ctype = 8;
    int64 size_in_bytes = 9;
}

// the logical storage unit for data group
message PartitionStatus {
    int32 partition_id = 1;
    int32 cell_count = 2;
    int64 num_rows = 3;
    string display = 4;
}

message PartitionToNode {
    int32 partition_id = 1;
    repeated string node_list = 2;
}

message DB3PartitionDesc {
    repeated string columns = 2;
    int32 partition_count = 3;
    // range merge and split strategy
    int32 split_record_count = 5;
    int32 merge_record_count = 6;
    string range_column = 7;
}

message DB3ColumnDesc {
    string name = 1;
    DB3Type ctype = 2;
    bool null_allowed = 3;
}

message DB3SchemaDesc {
    repeated DB3ColumnDesc columns = 1;
    int32 version = 2;
}

enum DB3TableType {
    KTimeSeriesTable = 0;
    KStreamingTable = 1;
}

message DB3TableDesc {
    // the table name is like test.dev.table1
    string name = 1;
    DB3SchemaDesc schema = 2;
    DB3PartitionDesc partition_desc = 3;
    string db = 4;
    // time in second
    int64 ctime = 5;
    repeated PartitionToNode mappings = 6;
}

message DB3Database {
    string db = 1;
    // time in second
    int64 ctime = 2;
    StorageRegion region = 3;
}

/*
 * The name or tag for a Flight. May be used as a way to retrieve or generate
 * a flight or be used to expose a set of previously defined flights.
 */
message FlightDescriptor {

  /*
   * Describes what type of descriptor is defined.
   */
  enum DescriptorType {

    // Protobuf pattern, not used.
    UNKNOWN = 0;

    /*
     * A named path that identifies a dataset. A path is composed of a string
     * or list of strings describing a particular dataset. This is conceptually
     *  similar to a path inside a filesystem.
     */
    PATH = 1;

    /*
     * An opaque command to generate a dataset.
     */
    CMD = 2;
  }

  DescriptorType type = 1;

  /*
   * Opaque value used to express a command. Should only be defined when
   * type = CMD.
   */
  bytes cmd = 2;

  /*
   * List of strings identifying a particular dataset. Should only be defined
   * when type = PATH.
   */
  repeated string path = 3;
}

/*
 * A batch of Arrow data as part of a stream of batches.
 */
message FlightData {

  /*
   * The descriptor of the data. This is only relevant when a client is
   * starting a new DoPut stream.
   */
  FlightDescriptor flight_descriptor = 1;

  /*
   * Header for message data as described in Message.fbs::Message.
   */
  bytes data_header = 2;

  /*
   * Application-defined metadata.
   */
  bytes app_metadata = 3;

  /*
   * The actual batch of Arrow data. Preferably handled with minimal-copies
   * coming last in the definition to help with sidecar patterns (it is
   * expected that some implementations will fetch this field off the wire
   * with specialized code to avoid extra memory copies).
   */
  bytes data_body = 1000;
}

