{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DB3 Network","text":"<p>DB3 Network is a robust and secure decentralized data network designed to tackle the expected problems faced by dApps. These applications frequently require the ability to CRUD vast amounts of user-generated data, all while maintaining a decentralized architecture. By utilizing DB3 Network, you can effortlessly create data-intensive applications such as social networking apps, gamefi, and more.</p> <p> </p>"},{"location":"#guide-line-of-db3","title":"Guide Line of DB3","text":"<ul> <li>Before create your dApp, you need to create database or find the existing database you can use on DMS website</li> <li>Try Quick Start or based on ReactJS Demo to build your dApps with DB3 Network as your decentralized database</li> <li>Since running a dApp need connect with a node, you can ether find a existing node from Commuity nodes or</li> <li>Try Run Local Node to host your own nodes</li> </ul>"},{"location":"#build-dapps","title":"Build dApps","text":""},{"location":"#refer-to-db3js","title":"Refer to DB3.js =&gt;","text":"<p>DB3 Network is a data network the same as Firestore but in a decentralized way. DApps can directly interact with DB3 Network with db3 client. A properly designed <code>db3.js</code> package allow you do the \"CRUD\" job in the client never be easier</p>"},{"location":"#run-db3-node","title":"Run DB3 Node","text":"<p>DB3 network is community owned and everyone is ecouraged to be part of the network. You can run a DB3 node to provide data storage, compute and bandwidth for dApps and earn make a good profit from that.</p> <ul> <li>Run Locally Node</li> </ul>"},{"location":"#join-the-community","title":"Join the Community","text":"<ul> <li> <p>Join our Forum to ask questions and get support</p> </li> <li> <p>Join the Discord to discuss the Ceramic Network</p> </li> <li> <p>Follow us on Twitter for updates</p> </li> </ul>"},{"location":"index_oldx/","title":"DB3 Network Docs","text":"<p>DB3 Network is an open-source and decentralized firebase firestore alternative to build fully decentralized dApps quickly with minimal engineering effort</p> <p> </p>"},{"location":"index_oldx/#getting-started","title":"Getting Started","text":""},{"location":"index_oldx/#install","title":"Install","text":"<pre><code>curl --proto '=https' --tlsv1.2 -sSf https://up.db3.network/db3up_init.sh | sh\n</code></pre> Start the localnetJoin the devnetConnect to the devnet directly <pre><code>db3up localnet\n</code></pre> <p>open another terminal</p> <pre><code>db3 console --url http://127.0.0.1:26659\n</code></pre> <pre><code>db3up join_devnet\n</code></pre> <p>open another terminal</p> <pre><code>db3 console --url http://127.0.0.1:26659\n</code></pre> <p>joining the devnet will take a lot of time to sync data</p> <pre><code>db3 console --url https://grpc.devnet.db3.network\n</code></pre> <p>!!! failure \"command not found\"     please add the <code>~/.db3/bin</code> to the <code>PATH</code></p>"},{"location":"index_oldx/#create-a-local-keypair","title":"Create a local keypair","text":"<p><pre><code>db3&gt;-$ init\n address                                    | scheme\n--------------------------------------------+-----------\n 0x96bdb8e20fbd831fcb37dde9f81930a82ab5436b | secp256k1\n</code></pre> this command will create a key used for signing mutations</p>"},{"location":"index_oldx/#create-a-database","title":"Create a Database","text":"<pre><code>db3&gt;-$ new-db\n database address                           | transaction id\n--------------------------------------------+----------------------------------------------\n 0xffe0f0ea53dd3ccf6de1fc046a0f8eb68f98dded | ZJqQkwULNOuyVeeECGoHIHusyFTghsTWVJYMsg1afZM=\ndb3&gt;-$ show-db --addr 0xffe0f0ea53dd3ccf6de1fc046a0f8eb68f98dded\n database address                           | sender address                             | related transactions                        | collections\n--------------------------------------------+--------------------------------------------+----------------------------------------------+-------------\n 0xffe0f0ea53dd3ccf6de1fc046a0f8eb68f98dded | 0x96bdb8e20fbd831fcb37dde9f81930a82ab5436b | ZJqQkwULNOuyVeeECGoHIHusyFTghsTWVJYMsg1afZM= |\n</code></pre>"},{"location":"index_oldx/#create-a-collection","title":"Create a Collection","text":"<p><pre><code>db3&gt;-$  new-collection --addr 0xffe0f0ea53dd3ccf6de1fc046a0f8eb68f98dded  --name books --index '{\"name\":\"idx1\",\"fields\":[{\"field_path\":\"name\",\"value_mode\":{\"Order\":1}}]}'\nsend add collection done with tx\n3lY5/WKRw53x33UUZ6gCvsN4axLrdcf9PD41HqNIOYA=\ndb3&gt;-$ show-collection --addr 0xffe0f0ea53dd3ccf6de1fc046a0f8eb68f98dded\n name  | index\n-------+----------------------------------------------------------------------------\n books | {\"name\":\"idx1\",\"fields\":[{\"field_path\":\"name\",\"value_mode\":{\"Order\":1}}]}\n</code></pre> create a collection with name <code>books</code> and an index named <code>idx1</code> in database</p>"},{"location":"index_oldx/#create-a-document","title":"Create a Document","text":"<pre><code>db3&gt;-$ new-doc --addr 0x997f631fcafeed5ee319c83683ae16e64783602b --collection-name books --documents '{\"name\": \"John Doe\",\"age\": 43,\"phones\": [\"+44 1234567\",\"+44 2345678\"]}'\nsend add document done with tx\n+O9cK2cHLexZQvIITk4OTm8SxBhq7Yz7g+xZYiionWo=\n</code></pre>"},{"location":"index_oldx/#using-db3js","title":"Using db3.js","text":""},{"location":"index_oldx/#install_1","title":"Install","text":"Install with YarnInstall with Npm <pre><code>yarn add db3.js\n</code></pre> <pre><code>npm install db3.js\n</code></pre>"},{"location":"index_oldx/#hello-db3js","title":"Hello db3.js","text":"<pre><code>// create a db3 browser wallet \nconst mnemonic =\n'result crisp session latin must fruit genuine question prevent start coconut brave speak student dismiss'\nconst wallet = DB3BrowserWallet.createNew(mnemonic, 'DB3_SECP256K1')\n\n// you can use metamask to connect db3 network with the following code\n// const wallet = new MetamaskWallet(window)\n\n// create a database\nconst [dbId, txId] = await client.createDatabase()\n\n// connect a database with address\nconst {db} = initializeDB3('http://127.0.0.1:26659', dbId, wallet)\n\nconst indexList: Index[] = [\n{\nname: 'idx1',\nid: 1,\nfields: [\n{\nfieldPath: 'owner',\nvalueMode: {\noneofKind: 'order',\norder: Index_IndexField_Order.ASCENDING,\n},\n},\n],\n},\n]\n// create a collection with index and the following interface `Todo`\n//\n//interface Todo {\n//    text: string\n//    owner: string\n//}\n//\nconst collectionRef = await collection&lt;Todo&gt;(db, 'todos', indexList)\n\n// add a todo\nconst result = await addDoc&lt;Todo&gt;(collectionRef, {\ntext: 'beijing',\nowner: wallet.getAddress(),\n} as Todo)\n</code></pre>"},{"location":"index_oldx/#demos","title":"Demos","text":"<ul> <li>hello world with metamask</li> <li>todomvc</li> <li>create a database</li> <li>create a collection</li> </ul>"},{"location":"white_paper/","title":"White Paper","text":"<p>Working on that ...</p>"},{"location":"build/data_manager/","title":"The Example","text":"<p>Visit the website DMS Website to create or find a database</p>"},{"location":"build/quick_start/","title":"Quick Start","text":"<p>Build a demo on DB3 Network is super easy, follow the steps:</p>"},{"location":"build/quick_start/#step1-create-or-find-a-database","title":"Step1: Create or Find a database","text":"<p>You can create or find a database on Data Manager System Every public databases on DB3 can be find and be reused by every builder</p>"},{"location":"build/quick_start/#step2-build-dapps-based-on-the-database","title":"Step2: Build dApps based on the database","text":"<p>Since you've got a database , now you can build dApps based on the database.</p> <p>Here is a Demo example you may refer to Message_wall</p> <p>Or try On line Website of the demo</p>"},{"location":"build/quick_start/#chosing-nodes","title":"Chosing Nodes","text":"<p>DB3 network is composed by a group of nodes. You can chose what ever node to connect when building a dApp, or you can run self-running a node.</p>"},{"location":"build/quick_start/#find-exsiting-node","title":"Find exsiting node","text":"<p>We have two types of node: Normal Nodes &amp; Validator Nodes. Both types of node can be connected directly, the differences is that you have to sign when querying data from the validator nodes while no signiture is required when querying from normal nodes. The normal nodes will give user a better using experience but sacrifice some data security. All the data querid from normal nodes is not verified and this means the truth of the data cannot be trusted. While validator nodes do not have a security and trust problem but you have to sign for every Query Session</p> <p>Normal Nodes</p> <ul> <li>https://grpc.devnet.db3.network</li> </ul> <p>Validator Nodes</p> <ul> <li>http://18.162.230.6:26659</li> <li>http://16.163.108.68:26659</li> <li>http://18.162.114.26:26659</li> </ul>"},{"location":"build/quick_start/#running-a-local-node","title":"Running a local Node","text":"<p>Use this command line to download and install a client</p> <pre><code>$ curl --proto '=https' --tlsv1.2 -sSf https://up.db3.network/db3up_init.sh | sh\n</code></pre> <p>Note: curl and python3 are required in your environment</p> <p>A <code>db3</code> command and <code>db3up</code> command will be available on your terminal if everything goes well</p> <p>Note: If you encounter the error 'db3 not found' or 'db3up not found', use the following solution to resolve it: Run the <code>source ~/.zshrc</code> if you use zsh or <code>source ~/.bashrc</code> if you use bash</p> <p>You have two options available. The first is to host an independent local network, while the second involves connecting to a community network that will synchronize data from remote nodes.</p> <p>As independent local network Command line</p> <pre><code>$ db3up localnet\n</code></pre> <p>This command will init a local network at the end point of <code>http://127.0.0.1:26659</code></p> <p>As Community node Command line</p> <pre><code>$ db3up join_devnet\n</code></pre> <p>This command will also init a local network at the end point of <code>http://127.0.0.1:26659</code> but as a communit node and it will synchronize data from remote nodes and keep same block height</p>"},{"location":"build/quick_start/#build-a-dapp-with-js","title":"Build a dapp with JS","text":"<p>Start with <code>npm install db3.js</code></p> <p>1. Build db3 client</p> <pre><code>// the key seed\nconst mnemonic = \"...\";\n// create a wallet\nconst wallet = DB3BrowserWallet.createNew(mnemonic, \"DB3_SECP259K1\");\n// build db3 client\nconst client = new DB3Client(\"http://127.0.0.1:26659\", wallet);\n</code></pre> <p>2. Init databases and collection instance</p> <pre><code>// The database address\nconst databaseAddr = \"0x14c4eacfcb43d09b09139a0323d49fbe4ea0d5c9\";\n// The collection that store data\nconst collectionName = \"message\";\nconst db = new DB3Store(databaseAddr, client);\nconst collectionIns = await collection(db, collectionName);\n</code></pre> <p>3. CRUD data by collection</p> <pre><code>// add a doc to collection\nconst result = await addDoc(collectionIns, {\nmsg: \"hello\",\ntime: new Date(),\naddress: \"north\",\n});\n// get all docs from collection\nconst docs = await getDocs(collectionIns);\n\n// get docs by condition\nconst re = await getDocs(query(collectionIns, where(\"docId\", \"==\", \"xxxxx\")));\n</code></pre> <p>For a full demo build with <code>npm install db3.js</code> go to the repository TODO MVC Demo  For more info please go to db3.js repository</p>"},{"location":"build/quick_start/#use-console-client","title":"Use console client","text":"<p>1. Start db3  console client</p> <p><code>$  ./target/debug/db3 console</code></p> <p><pre><code>\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2554\u255d\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\n@db3.network\ud83d\ude80\ud83d\ude80\ud83d\ude80\ndb3&gt;-$\n</code></pre> 2. Create a database <pre><code>db3&gt;-$ new-db\n database address                           | mutation id\n--------------------------------------------+----------------------------------------------\n 0x59cd014b73b81e36daa90f2dee940709474809ac | au3Q+hMreJe2MGXeIjxtKcUFhwJbPDciVyFOZd2bvgQ=\n</code></pre></p> <pre><code> db3&gt;-$ show-db --addr 0x59cd014b73b81e36daa90f2dee940709474809ac\n # | database address                           | description | sender address                             | related mutations                            | collections\n---+--------------------------------------------+-------------+--------------------------------------------+----------------------------------------------+-------------\n 1 | 0x59cd014b73b81e36daa90f2dee940709474809ac |             | 0x6922f1bf2cbde237e0bf53dda36186e9ed2e5e08 | au3Q+hMreJe2MGXeIjxtKcUFhwJbPDciVyFOZd2bvgQ= |\n</code></pre> <p>3. Create a  new collection in the database <pre><code>db3&gt;-$ new-collection  --addr 0x59cd014b73b81e36daa90f2dee940709474809ac --name userinfo  --index '{\"id\": 1,\"name\": \"idx1\",\"fields\": [{\"field_path\": \"name\",\"value_mode\": {\"Order\": 1}},{\"field_path\": \"bio\",\"value_mode\": {\"Order\": 2}}]}'\nsend add collection done!\n mutation_id\n----------------------------------------------\n 9Uo1VL1I/sMYHbzY+vHybYMn4Z2KPPrJQ2+sfZvI8sM=\n</code></pre> <pre><code>db3&gt;-$ show-collection --addr 0x59cd014b73b81e36daa90f2dee940709474809ac\n name     | index\n----------+--------------------------------------------------------------------------------------------------------------------------------\n userinfo | {\"name\":\"idx1\",\"id\":0,\"fields\":[{\"field_path\":\"name\",\"value_mode\":{\"Order\":1}},{\"field_path\":\"bio\",\"value_mode\":{\"Order\":2}}]}\n</code></pre></p> <p>4. Create a  new doc in the collection <pre><code>db3&gt;-$ new-doc  --addr 0x59cd014b73b81e36daa90f2dee940709474809ac --collection-name userinfo   --documents '{\"name\": \"Bob\",\"age\": 43,\"bio\": \"a virtual person in Blockchain\"}'\nsend add document done\nmutation id\n----------------------------------------------\n ct9xhtOtnrbUj+g6c8cppHaKn9RknQNSF5kx0xxw5NQ=\n</code></pre></p> <pre><code>db3&gt;-$ show-doc --addr 0x59cd014b73b81e36daa90f2dee940709474809ac --collection-name userinfo\n id_base64                            | owner                                      | document                                                                                             | mutation_id\n--------------------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------+----------------------------------------------\n AQAAAAAAAFy3AAEAAQAAAAAAAF0bAAEAAA== | 0x6922f1bf2cbde237e0bf53dda36186e9ed2e5e08 | Document({\"name\": String(\"Bob\"), \"age\": Int64(43), \"bio\": String(\"a virtual person in Blockchain\")}) | ct9xhtOtnrbUj+g6c8cppHaKn9RknQNSF5kx0xxw5NQ=\n</code></pre> <p>5. Query a  doc by  limit <pre><code>db3&gt;-$ show-doc --addr 0x59cd014b73b81e36daa90f2dee940709474809ac --collection-name userinfo  --limit 1\nid_base64                            | owner                                      | document                                                                                             | mutation_id\n--------------------------------------+--------------------------------------------+------------------------------------------------------------------------------------------------------+----------------------------------------------\n AQAAAAAAAFy3AAEAAQAAAAAAAF0bAAEAAA== | 0x6922f1bf2cbde237e0bf53dda36186e9ed2e5e08 | Document({\"name\": String(\"Bob\"), \"age\": Int64(43), \"bio\": String(\"a virtual person in Blockchain\")}) | ct9xhtOtnrbUj+g6c8cppHaKn9RknQNSF5kx0xxw5NQ=\n</code></pre> <pre><code>db3&gt;-$ show-doc --addr 0x59cd014b73b81e36daa90f2dee940709474809ac --collection-name userinfo  --limit 2\nid_base64                            | owner                                      | document                                                                                               | mutation_id\n--------------------------------------+--------------------------------------------+--------------------------------------------------------------------------------------------------------+----------------------------------------------\n AQAAAAAAAFy3AAEAAQAAAAAAAF0bAAEAAA== | 0x6922f1bf2cbde237e0bf53dda36186e9ed2e5e08 | Document({\"name\": String(\"Bob\"), \"age\": Int64(43), \"bio\": String(\"a virtual person in Blockchain\")})   | ct9xhtOtnrbUj+g6c8cppHaKn9RknQNSF5kx0xxw5NQ=\nAQAAAAAAAFy3AAEAAQAAAAAAAF8YAAEAAA== | 0x6922f1bf2cbde237e0bf53dda36186e9ed2e5e08 | Document({\"name\": String(\"alice\"), \"age\": Int64(43), \"bio\": String(\"a virtual person in Blockchain\")}) | X1Ml6FfwYm9x2ZWXdLCjWrDDk3YlLaOty/pOz/i/icE=\n</code></pre></p> <p>6. Query a  doc by  filter <pre><code>db3&gt;-$ show-doc --addr  0x59cd014b73b81e36daa90f2dee940709474809ac  --collection-name  userinfo --filter '{\"field\": \"name\", \"value\": \"Bob\", \"op\": \"==\"}'\n</code></pre></p>"},{"location":"build/CRUD/mutation/","title":"Mutation","text":""},{"location":"build/CRUD/mutation/#the-flow-of-executing-mutation","title":"The Flow Of Executing Mutation","text":""},{"location":"build/CRUD/mutation/#how-to-distribute-mutation-to-storage-chain","title":"How to distribute Mutation to Storage Chain","text":""},{"location":"build/CRUD/mutation/#submit-mutaion-from-sdk","title":"Submit Mutaion From SDK","text":"<p>![sdk] (./images/db3_sdk.png)</p>"},{"location":"build/CRUD/query/","title":"Query","text":""},{"location":"build/CRUD/query/#the-flow-of-query","title":"The Flow of Query","text":""},{"location":"build/CRUD/query/#how-to-locate-the-storage-node","title":"How to locate the Storage Node","text":""},{"location":"build/client/terminal_client/","title":"Terminal client","text":""},{"location":"build/client/terminal_client/#step2-connect-to-db3-network","title":"Step2: Connect to DB3 Network","text":"<p>One code is enough to connect your device to the DB3 network. We provide several endpoints on dev network your can test with</p> <pre><code>$ db3 console --url https://grpc.devnet.db3.network\n</code></pre>"},{"location":"build/client/terminal_client/#step3-initcreatecrud","title":"Step3: Init,Create,CRUD","text":"<p>Now you can initialize your first DB3 account and create your first on-chain database and do some CRUD job</p> <pre><code>db3&gt;-$ init\n address                                    | scheme\n--------------------------------------------+-----------\n 0x22c2941d470ce512f3a3d347918d226a9b49dd77 | secp256k1\ndb3&gt;-$ new-db\n database address                           | mutation id\n--------------------------------------------+----------------------------------------------\n 0x51de2d0e720096bf4c5b680fce99a7f115b28820 | PJMCR8tjUMM3fjyGDwzwawj1f0Mc7JcrCokmVkpsZP8=\n</code></pre> <p>If you want to know more detail about command line , refer to DB3-Cli</p> <p> </p>"},{"location":"build/demos/js_demo/","title":"Demos","text":"<p>We privode some demos:</p> <ul> <li>Create database and the related Github repository</li> <li>Message wall A website where people can login with metamask and leave a message and the project Github repository</li> <li>Todo MVC and the related Github repository</li> </ul>"},{"location":"build/node/community_node/","title":"Community Nodes","text":"<p>We have two types of node: Normal Nodes &amp; Validator Nodes. Both types of node can be connected directly, the differences is that you have to sign when querying data from the validator nodes while no signiture is required when querying from normal nodes. The normal nodes will give user a better using experience but sacrifice some data security. All the data querid from normal nodes is not verified and this means the truth of the data cannot be trusted. While validator nodes do not have a security and trust problem but you have to sign for every Query Session</p> <p>Normal Nodes</p> <ul> <li>https://grpc.devnet.db3.network</li> </ul> <p>Validator Nodes</p> <ul> <li>http://18.162.230.6:26659</li> <li>http://16.163.108.68:26659</li> <li>http://18.162.114.26:26659</li> </ul>"},{"location":"build/node/run_locally/","title":"Self Running Node","text":""},{"location":"build/node/run_locally/#running-a-local-node","title":"Running a local Node","text":"<p>Use this command line to download and install a client</p> <pre><code>$ curl --proto '=https' --tlsv1.2 -sSf https://up.db3.network/db3up_init.sh | sh\n</code></pre> <p>Note: curl and python3 are required in your environment</p> <p>A <code>db3</code> command and <code>db3up</code> command will be available on your terminal if everything goes well</p> <p>Note: If you encounter the error 'db3 not found' or 'db3up not found', use the following solution to resolve it: Run the <code>source ~/.zshrc</code> if you use zsh or <code>source ~/.bashrc</code> if you use bash</p> <p>You have two options available. The first is to host an independent local network, while the second involves connecting to a community network that will synchronize data from remote nodes.</p> <p>As independent local network Command line</p> <pre><code>$ db3up localnet\n</code></pre> <p>This command will init a local network at the end point of <code>http://127.0.0.1:26659</code></p> <p>As Community node Command line</p> <pre><code>$ db3up join_devnet\n</code></pre> <p>This command will also init a local network at the end point of <code>http://127.0.0.1:26659</code> but as a communit node and it will synchronize data from remote nodes and keep same block height</p>"},{"location":"learn/advanced/dvm/","title":"DVM","text":""},{"location":"learn/advanced/dvm/#overview","title":"Overview","text":""},{"location":"learn/advanced/dvm/#deploy-contract","title":"Deploy Contract","text":""},{"location":"learn/advanced/overview/","title":"Overview","text":"<p>Schemaless</p> <p>You can store data on DB3 Network without any change.</p> <p>High Performance</p> <p>Currently, decentralization means terrible performance, but DB3 is trying to improve it significantly: * Merkdb is the storage engine of the DB3 Network, and it has high Performance and fast-proof generation.  * Geo distribution: the nodes in every storage shard are geo-distributed, and the clients can execute queries against the nearest storage node. * Query session, the first decentralized query protocol to resolve Performance and incentive perfectly.</p> <p>Data Ownership</p> <p>We proposed the document level ownership, and every document has its owner, while only the owner holds the private key can update/delete the record. DB3 network generates the proofs and provides signatures to prove the membership (db3 has the specific document) and ownership.</p> <p>Programmable</p> <p>Dapp developers can develop data processing contracts and deploy them to the DB3 Network, just like the data backend in web2.</p> <p>Ethereum Guarded Security</p> <p>DB3 Network is a layer2 network on Ethereum and Ethereum guards all the assets.</p>"},{"location":"learn/advanced/overview/#project-assistance","title":"Project assistance","text":"<ul> <li>Add a GitHub Star\u2b50\ufe0f to the project.</li> <li>Tweet about how to use DB3 network.</li> <li>Write blogs about the project on Dev.to, Medium or your personal blog.</li> </ul> <p>Together, we can make db3 network better!</p>"},{"location":"learn/advanced/overview/#the-internal-of-db3","title":"The internal of db3","text":""},{"location":"learn/advanced/overview/#the-architecture","title":"The Architecture","text":""},{"location":"learn/advanced/overview/#how-it-works","title":"How it works","text":"<ul> <li>mutation</li> <li>query session</li> <li>dvm</li> <li>merkdb</li> </ul>"},{"location":"learn/basic/features/","title":"Features of DB3 Network","text":"<p>First of all, DB3 is a database. As a database, it should inherit some desirable properties that traditional databases have, such as low latency, high throughput, and high scalability. On the other hand, only decentralization can make this whole project community owned and enable every user in control of their own data. DB3 as a dedicated on-chain database contains the following main features:</p> <ol> <li>The dynamic structured data file can be mutated easily</li> <li>Decentralization.</li> <li>On-chain indexing which allows direct querying.</li> <li>A complete data ownership system based on the private key.</li> <li>Serverless: Data on-chain programmable.</li> </ol> <p>What these features exactly mean? Let\u2019s explain in detail. </p>"},{"location":"learn/basic/features/#dynamic-structured-data","title":"Dynamic structured data","text":"<p>What is a dynamic structured file? It\u2019s a specific file structure definition in comparison with a static file structure. </p> <p>Let\u2019s put it in an easy way. A picture is a non-structured file and an Excel file is a structured file. You can easily update one line in an Excel file but you can never or at least very hard to change some content on a picture, right? </p> <p>Assuming you save a file that contains the following lines:</p> id name address 12 Lisa London 13 Lily Tokyo <p>The form is just how the data is present on the website. The actual structure of the data may arbitrarily look like this (just for example, not true data structure on DB3 ):</p> <pre><code>{\nschema:[id,name,address],\nunique_index: id,\ntotal_count:2,\nrecords:[\n{ id:12,\nname: Lisa,\naddress: London\n},\n{ id:13,\nname: Lily,\naddress: Tokyo\n}\n]\n}\n</code></pre> <p>When you upload this file onto Arweave or IPFS, you will receive a CID or a key that allows you to retrieve this file later. Normally the key is a hash of the file: <code>w2vdykrtjkwiphwekaywqhcjze</code>. </p> <p>If someone wants to know Lisa\u2019s address, you have to give him/her the key of the file and he/she reloads the whole file from the network. </p> <p>Wait! He just wants to know one line of the file, and why you have to offer the whole thing. This is apparently an unwise way since this is very inefficient. Imagine this is a 10GB file and downloading the file cost half an hour. I don\u2019t even mention the privacy problem here. But the truth is: This is exactly how Arweave works now. You see the problem here.</p> <p>What\u2019s worse, if someday the address of Lisa changes and you want to update this form, there\u2019s no way to change just one line of the existing file. All you can do is upload a completely new file and get a new CID of the file. The result is a lot of redundant files exit on the storage system and wastes a lot of storage. </p> <p>The way that file systems like IFPS or Arweave are designed is not for highly efficient reading and writing. They are more like a cold backup storage system.</p> <p>However, with DB3 everything is much easier. We don\u2019t provide a hash key or CID but a <code>Table</code> under a specific <code>Namespace</code>. The records in the table are dynamic and can be queried or changed easily. That\u2019s what we call <code>dynamic structured data.</code></p> <p>That\u2019s the biggest difference between DB3 and Arweave or Arweave alike static file storage system.</p> <p></p>"},{"location":"learn/basic/features/#decentralization","title":"Decentralization","text":"<p>DB3 is standing on the shoulders of giants. We don\u2019t invent any new concepts on the consensus mechanism. A lot of networking and consensus works of DB3 are built based on Tendermint. DB3 is composed of two main parts: The shard storage chain and the settlement chain. We somehow make DB3 a totally Byzantine Fault Tolerate network without sacrificing the low latency and scalability of the database.  The benefits of decoupling the two functional modules will be described in detail below.</p>"},{"location":"learn/basic/features/#on-chain-indexing","title":"On-chain Indexing","text":"<p><code>Indexing</code> is a key part of the internet. Indexing is working whenever you\u2019re searching for something from a giant search engine like Google or a small website like Ethersan. When you log in to a website with your account id, it knows who you are and what information is behind the account id. Or when you type in an address on Ethersan\u2019s search inbox it returns you all the history transactions that belong to the address. Those all depend on the work of indexing. </p> <p>But who is providing those indexing? Let\u2019s take the <code>Ethereum</code> blockchain as an example. As we all know that the Ethereum miners or validators just work as safeguards to protect the safety of the Ethereum network. The main job of miners is to propose, execute and verify each block to achieve consensus, but do not provide query services for clients through they actually store all transaction data. The main reason they don\u2019t or can\u2019t act as a server is that the data is not well structured for query purposes. Another reason like tokenomic rewards does not encourage miners to do an extra job like querying. </p> <p>As a result, there must be a third party to provide indexing. That\u2019s what Infura or Alchemy are doing right now but centralized. The gap between on-chain and off-chain is inevitable.</p> <p></p> <p>As to DB3, in order to be engaged in the massive adoption of the incoming web3 era, data storing and data querying had been taken into account from the first day we design the network.  We do believe the gap between on-chain data production and off-chain data consumption can be eliminated. The departure of data storage and data indexing is a compromise.</p> <p>Miners or validators in DB3 play both as storage nodes and query nodes. Clients can query data from miners directly. The miners will not only be rewarded by storing data but also be rewarded by providing data querying services.</p> <p></p>"},{"location":"learn/basic/features/#data-ownership-system","title":"Data Ownership System","text":"<p>Since data on DB3 is a dynamic table, there must be someone who can insert records into the table, update records and delete records or even drop the whole table. The process of changing file records is called Mutation. Every table on-chain is belonged to or is controlled by an account.  Only the account has the right to update the table. That\u2019s what we call a data control system. All data is generated by users and controlled by users.</p> <p></p>"},{"location":"learn/basic/features/#serverless-data-on-chain-programmable","title":"Serverless: Data on-chain programmable","text":"<p>As a developer, you don\u2019t have to maintain your own cloud server or container. App developers just focus on the business logic of their app.</p> <p>Developers deploy the function the app needs to the DB3 network. When the user or client wants to do some operations, for example, subscribe to someone on a decentralized forum, the client will call a function or invoke a function that does the job of writing some records into some table.</p> <p>So, let\u2019s look at some of the benefits:</p> <ul> <li>Pay for execution.</li> </ul> <p>Developers don\u2019t have to maintain a continuously running server. That means there is no idle time. You only pay for the time when the function is running. It's very cost-efficient and the functions usually run at 100 milliseconds of time.</p> <ul> <li>Auto scalable.</li> </ul> <p>Since the function or coda as a contract is deployed on every storage node. Every node on the network can operate as a service provider. When you architect your apps, you're not provisioning for any of that.</p> <ul> <li>Fast app build</li> </ul> <p>Again, since you're not responsible for any of the management and deployment of any of the underlying infrastructure, you can build your apps faster, solve customer problems and bring them to market.</p> <ul> <li>Transparency of data production and consumption</li> </ul> <p>Since all the code on-chain is open to the public, everyone can check the code and know exactly how does the code dealing with their data. Of cause, this will lead to the problem of privacy which will be the main subject of DB3\u2019s Phase 3.</p> <p></p>"},{"location":"learn/basic/why_db3/","title":"Why DB3","text":"<p>Currently, there are two types of Data architecture for dApp(decentralized application): centralized vs. decentralized.</p> <p>Centralized: use Firebase  or MongoDBto store the data, both of which are developer-friendly. However, dApps would be regarded as less secure based on a central database.</p> <p>Decentralized: use Ethereum or other blockchains to store the data and use The Graph to index data from it. The separation of the storage and the indexer would cost a lot of engineering efforts in future development.</p> <p>With Db3 network, you can get both advantages of the above two choices.</p> <p> </p>"},{"location":"learn/basic/why_db3/#advantages","title":"Advantages","text":""},{"location":"learn/basic/why_db3/#decentralization","title":"Decentralization","text":"<p>The DB3 network is totally decentralized and permissionless, allowing anyone in the world to spin up a node to provide storage, compute, and bandwidth resources to users and applications built on the network. All the nodes on the network are connected to each other and syncronize data among each other. Users or dApps could write and read data from every node. </p> <p> </p>"},{"location":"learn/basic/why_db3/#data-ownership","title":"Data Ownership","text":"<p>As a decentralized and permissionless network, we guarrantee the ownship of the data. No one but the user who hold the privte key can change and update their data. </p> <p> </p>"},{"location":"learn/basic/why_db3/#developer-experience","title":"Developer Experience","text":"<p>DB3 network provide the best developer experience. We design a well structured database and can be easilly interact with, the same as using centralized database. </p>"},{"location":"learn/basic/why_db3/#web2-familiar","title":"Web2 familiar","text":"<p>Since user-generated data is not the same as on-chain token. The way we storage them can be quite different. Most concepts on centralized databases apply to DB3 network, such as namespace, table, indexing. Life is short ,you don't have so much time to learn redundant new concepts</p> <p> </p>"},{"location":"learn/basic/why_db3/#open-data","title":"Open data","text":"<p>DB3 Network is an open network, all the data is available for every developer. Every database on DB3 network have a unique address just like an ETH contract. You can interact with these open databases as if interact with an ETH contract. Maybe some of require fees while others not. But they are open to public after all and belongs to no one.</p> <p> </p>"},{"location":"learn/basic/why_db3/#blazed-fast","title":"Blazed fast","text":"<p>We know what your concerned about. DB3 network is fast, blazed fast! Never under estimate what decentralized network can achieve as to speed and user experience.</p> <p>Currently, decentralization means terrible performance, but DB3 is trying to improve it significantly:</p> <p>Merkdb is the storage engine of the DB3 Network, and it has high Performance and fast-proof generation. Geo distribution: the nodes in every storage shard are geo-distributed, and the clients can execute queries against the nearest storage node. Query session, the first decentralized query protocol to resolve Performance and incentive perfectly.</p> <p> </p>"},{"location":"learn/network/overview/","title":"Overview","text":"<p>DB3 network can be regarded as a decentralized database that resambling Google Firebase. With DB3 you can build almost every data-heavy dApps while not sacrifice decentralization. As a data layer infrasturce, DB3 care about the user experience and deal with the network security problems</p>"},{"location":"learn/network/overview/#several-concepts-of-db3","title":"Several Concepts of DB3","text":""},{"location":"learn/network/overview/#nodes","title":"Nodes","text":""},{"location":"learn/network/account/account/","title":"Account Model","text":""},{"location":"learn/network/account/account/#account","title":"Account","text":"<p>an account designates a pair of public key PubKey and private key PrivKey. The PubKey can be derived to generate various Addresses, which are used to identify users (among other parties) in the application</p>"},{"location":"learn/network/account/account/#balance","title":"Balance","text":"<p>Every account must have some balance of db3 used to pay transaciont gas fee</p>"},{"location":"learn/network/fees/bills/","title":"Bills","text":""}]}