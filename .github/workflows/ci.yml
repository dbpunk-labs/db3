name: CI # Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  coverage:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest
      - name: Setup Build env
        run: |
          sudo apt-get install protobuf-compiler 
          protoc --version
          ROOT_DIR=`pwd`
          cd ${ROOT_DIR}/metadata && yarn install
          cd ${ROOT_DIR}/metadata && npx hardhat compile --force && echo "return code $?"
          ls ${ROOT_DIR}/metadata
          cd ${ROOT_DIR}/metadata && npx hardhat test && echo "return code $?"
          test -e ${ROOT_DIR}/metadata/artifacts/contracts/DB3MetaStore.sol/DB3MetaStore.json && cp -f ${ROOT_DIR}/metadata/artifacts/contracts/DB3MetaStore.sol/DB3MetaStore.json ${ROOT_DIR}/abi/
          cd ${ROOT_DIR} && cargo build
          cd ${ROOT_DIR}/tools
          sh start_localnet.sh >db3.log 2>&1 &
          sleep 3
          tail -n200 db3.log
      - name: Run rust test with coverage
        run: |
          cargo llvm-cov nextest --workspace --exclude merkdb  --lcov --output-path lcov.info --no-fail-fast
      - name: Run sdk test
        run: |
          ROOT_DIR=`pwd`
          cd $ROOT_DIR/sdk && yarn && make
          cd $ROOT_DIR/sdk && yarn test --coverage
      - uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.COV_TOKEN}}
          directory: .
          flags: rust
